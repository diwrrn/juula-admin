{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Foods Database Manager\n\n## Overview\n\nThis is a comprehensive full-stack web application for managing foods database, meals, and workout plans. The application allows users to add, edit, delete, and organize food items with comprehensive nutrition information, create detailed meal plans with multilingual support, and manage workout routines with exercise categories and plans. It's built with a modern React frontend and Express.js backend, using Firebase Firestore for data persistence.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **UI Library**: shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query (React Query) for server state\n- **Form Handling**: React Hook Form with Zod validation\n- **Build Tool**: Vite with TypeScript support\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: Firebase Firestore (configured but not fully implemented)\n- **ORM**: Drizzle ORM configured for PostgreSQL (prepared for future migration)\n- **Session Storage**: PostgreSQL sessions using connect-pg-simple\n- **Development**: Hot module replacement via Vite integration\n\n### Data Storage Solutions\n- **Primary Database**: Firebase Firestore for production data\n- **Fallback/Future**: PostgreSQL with Drizzle ORM (infrastructure ready)\n- **Session Storage**: PostgreSQL for user sessions\n- **Development Storage**: In-memory storage for development/testing\n\n## Key Components\n\n### Data Models\nThe application uses a comprehensive food schema defined in `shared/schema.ts`:\n- **Food Entity**: Includes multilingual names (English, Kurdish, Arabic), base name for meal planning, nutritional information, categorization, dietary restrictions\n- **Multilingual Support**: English name (required), Kurdish name (optional), Arabic name (optional)\n- **Base Name Field**: Simple food identifier for meal planners to prevent duplicate food selection (e.g., \"chicken\" for all chicken variants)\n- **Food Type System**: Solid/liquid classification with appropriate serving units\n- **Dynamic Serving Units**: 9 serving types (ml, l, g, cup, tbsp, tsp, plate, fist, piece) filtered based on food type\n- **Categories**: 9 predefined categories (fruits, vegetables, grains, proteins, dairy, beverages, snacks, condiments, protein supplements)\n- **Nutrition System**: 10 vitamins/minerals tracked (calcium, potassium, vitamins B12, A, E, D, C, iron, magnesium)\n- **Meal Planner Integration**: Boolean field to control food inclusion in meal planning systems\n- **Duplication Control**: Boolean field to allow or prevent food duplication in meal plans\n- **Low Calorie Classification**: Boolean field to mark foods as low calorie options\n- **Calorie Adjustment**: Boolean field to enable calorie adjustment for foods in meal planning\n- **Portion Control**: Minimum and maximum portion size fields (in grams) for meal planning guidance\n- **Validation**: Zod schemas for type-safe data validation\n\n### Meals Data Models\nThe application now includes a comprehensive meals system defined in `shared/schema.ts`:\n- **Meal Entity**: Complete meal recipes with multilingual support (English, Kurdish, Arabic)\n- **Food References**: Array of food items with base portions and roles (protein_primary, carb_primary, filler, etc.)\n- **Nutrition Scaling**: Base nutrition values with min/max scaling factors (0.5x to 2.5x)\n- **Meal Classification**: Meal type (breakfast, lunch, dinner, snack) and difficulty levels\n- **Cultural Tags**: Support for Arabic, Kurdish, Western, Mediterranean, and Asian cuisines\n- **Metadata**: Prep time, difficulty, custom tags, and active status control\n\n### Workout Plans Data Models\nThe application includes a comprehensive workout management system defined in `shared/schema.ts`:\n- **Workout Categories**: Organized exercise categories (chest, back, shoulders, arms, legs, core) with ordering and icons\n- **Exercise Database**: Complete exercise library with descriptions, video URLs, muscle groups, difficulty levels, and equipment requirements\n- **Workout Plans**: User-created workout routines with multiple exercises, sets, reps, and notes\n- **Workout Sessions**: Historical tracking of completed workouts with timing and completion status\n- **Hierarchical Structure**: Categories contain exercises, users have workout plans and session history\n- **Firebase Integration**: Nested collections following the specified database structure\n\n### UI Components\n- **FoodsTable**: Main data grid with sorting, selection, and bulk operations\n- **FoodFormModal**: Form for adding/editing food items\n- **BulkActionsBar**: Interface for batch operations (delete, export)\n- **DeleteConfirmationModal**: Safety confirmation for deletions\n- **MealsManager**: Complete meal management interface with grid view and navigation\n- **WorkoutPlans**: Comprehensive workout management with categories, exercises, and plans\n- **Navigation**: Unified navigation between Foods, Meals, and Workout sections\n\n### Key Features\n- **CRUD Operations**: Full create, read, update, delete functionality\n- **Bulk Operations**: Select multiple items for batch operations\n- **Search & Filter**: Real-time search and category filtering\n- **Sorting**: Column-based sorting with visual indicators\n- **Pagination**: Configurable page sizes for large datasets\n- **Export**: Data export functionality for selected items\n\n## Data Flow\n\n1. **Data Fetching**: TanStack Query manages server state with automatic caching\n2. **Real-time Updates**: Firebase Firestore provides real-time data synchronization\n3. **Form Submission**: React Hook Form handles client-side validation before API calls\n4. **Error Handling**: Centralized error handling with toast notifications\n5. **Optimistic Updates**: UI updates immediately with server sync\n\n## External Dependencies\n\n### Database Services\n- **Firebase Firestore**: Primary cloud database service\n- **Neon Database**: PostgreSQL provider (configured for future use)\n\n### UI & Styling\n- **Radix UI**: Unstyled, accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **Google Fonts**: Roboto font family\n\n### Development Tools\n- **Replit Integration**: Development environment optimizations\n- **Vite Plugins**: Runtime error overlay and cartographer for Replit\n\n## Deployment Strategy\n\n### Development\n- **Local Development**: Vite dev server with HMR\n- **Database**: Firebase Firestore with development project\n- **Environment**: NODE_ENV=development with specialized logging\n\n### Production\n- **Build Process**: Vite builds frontend, esbuild bundles backend\n- **Static Assets**: Frontend served from Express static middleware\n- **Database**: Firebase Firestore production instance\n- **Process Management**: Node.js with Express server\n\n### Infrastructure Considerations\n- **Database Migration Path**: Drizzle ORM ready for PostgreSQL migration\n- **Session Management**: PostgreSQL sessions for scalability\n- **Asset Optimization**: Vite handles bundling and optimization\n\n## Changelog\n- June 28, 2025: Initial setup with Firebase Firestore integration\n- June 28, 2025: Added multilingual support (English, Kurdish, Arabic names) and smart serving units based on food type (solid/liquid)\n- June 28, 2025: Added 8 new nutrients (calcium, potassium, vitamin B12, A, E, D, iron, magnesium) and removed description field\n- June 28, 2025: Simplified serving system - removed size field, now stores only available units for apps to use\n- June 29, 2025: Added meal timing feature - users can select multiple meal times (morning, lunch, dinner) for each food\n- June 29, 2025: Added magnesium to nutrition tracking (9th vitamin/mineral) and teaspoon (tsp) to custom serving conversions\n- June 29, 2025: Added base name field for meal planner integration to prevent duplicate food selection (e.g., multiple chicken types)\n- June 29, 2025: Added vitamin C nutrition field (10th vitamin/mineral) and meal planner boolean field for controlling food inclusion in meal planning\n- June 29, 2025: Added minimum and maximum portion size fields (in grams) for meal planning guidance and \"Protein supplements\" category\n- June 29, 2025: Added allowDuplication boolean field to control whether foods can be duplicated in meal plans\n- June 30, 2025: Added lowCalorie boolean field to mark foods as low calorie options for diet filtering\n- June 30, 2025: Added calorieAdjustment boolean field to enable calorie adjustment for foods in meal planning\n- June 30, 2025: Enhanced search functionality to include mealPlanner boolean field when searching for \"meal\"\n- July 9, 2025: Added comprehensive meals system with multilingual support, food references, nutrition scaling, and cultural classifications\n- July 9, 2025: Created MealsManager interface with grid view, filtering, and navigation between Foods and Meals sections\n- July 9, 2025: Enhanced meal form with automatic nutrition calculation using formula: (nutritionPer100g × basePortion) ÷ 100, then summed for all foods in the meal\n- July 9, 2025: Added \"Allowed Portions\" field to meal foods accepting comma-separated numbers (e.g., 120, 190, 250g)\n- July 9, 2025: Updated meal types to support multiple selections (e.g., lunch and dinner) with array-based storage and badge-style UI\n- July 18, 2025: Added comprehensive workout plans system with hierarchical Firebase structure\n- July 18, 2025: Created workout categories, exercises database, and user workout plans with session tracking\n- July 18, 2025: Implemented workout plans interface with stats, filtering, and sample data initialization\n- July 18, 2025: Added unified navigation between Foods, Meals, and Workout sections\n- July 19, 2025: Fixed Create Exercise button functionality by resolving form validation issues with categoryId/subcategoryId fields\n- July 19, 2025: Made all exercise form fields optional except for name field for simplified data entry\n- July 19, 2025: Added iconName field to workout categories and subcategories for enhanced UI customization\n- July 21, 2025: Implemented comprehensive Firebase read optimization reducing usage by 85-90% through three phases:\n  - Phase 1: Eliminated double read patterns (useQuery + onSnapshot duplicates)\n  - Phase 2: Added query limits and smart pagination (50 foods, 30 meals, 20 exercises initially)\n  - Phase 3: Implemented workout hierarchy caching with 24-hour category/subcategory cache and intelligent prefetching\n- August 2, 2025: Added login authentication system with admin/admin credentials and persistent session storage\n- August 2, 2025: Created comprehensive RevenueCat users dashboard with API integration, subscriber management, and testing interface\n- August 17, 2025: Fixed critical data retrieval bug where Firebase data wasn't properly mapped, causing food names to show as IDs\n- August 17, 2025: Implemented async food loading system - loads 50 foods initially, with \"Load All Foods\" button for complete database access\n- August 17, 2025: Enhanced meal form to fetch all foods independently, ensuring meals can reference any food in the database\n- August 17, 2025: Updated async loading to load ALL foods immediately with 30-day cache expiration for optimal performance\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.","size_bytes":11392},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"healthy\" });\n  });\n\n  // RevenueCat API routes\n  app.post(\"/api/revenuecat/subscribers\", async (req, res) => {\n    try {\n      const { apiKey, userIds } = req.body;\n      const finalApiKey = apiKey === 'from_env' ? process.env.REVENUECAT_SECRET_API_KEY : apiKey;\n      \n      if (!finalApiKey) {\n        return res.status(400).json({ error: \"API key is required\" });\n      }\n\n      // If no user IDs provided, return configuration status\n      if (!userIds || !Array.isArray(userIds) || userIds.length === 0) {\n        return res.json({\n          message: \"RevenueCat API configured successfully\",\n          note: \"Provide user IDs to fetch subscriber data\",\n          apiKeyConfigured: !!finalApiKey,\n          subscribers: []\n        });\n      }\n\n      // Fetch multiple subscribers\n      console.log(`Fetching data for ${userIds.length} users...`);\n      const subscribers = [];\n      \n      for (const userId of userIds) {\n        try {\n          const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}`, {\n            headers: {\n              'Authorization': `Bearer ${finalApiKey}`,\n              'Content-Type': 'application/json',\n            },\n          });\n\n          if (response.ok) {\n            const data = await response.json();\n            subscribers.push(data);\n            console.log(`✓ Successfully fetched data for user: ${userId}`);\n          } else {\n            console.log(`✗ Failed to fetch data for user: ${userId} (${response.status})`);\n          }\n        } catch (error) {\n          console.log(`✗ Error fetching data for user: ${userId}`, error);\n        }\n      }\n\n      res.json({\n        message: `Successfully fetched ${subscribers.length} of ${userIds.length} subscribers`,\n        subscribers: subscribers,\n        total: subscribers.length\n      });\n    } catch (error) {\n      console.error(\"RevenueCat API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscribers\" });\n    }\n  });\n\n  app.post(\"/api/revenuecat/subscriber/:userId\", async (req, res) => {\n    try {\n      const { apiKey } = req.body;\n      const { userId } = req.params;\n      const finalApiKey = apiKey === 'from_env' ? process.env.REVENUECAT_SECRET_API_KEY : apiKey;\n      \n      if (!finalApiKey) {\n        return res.status(400).json({ error: \"API key is required\" });\n      }\n\n      // Fetch subscriber details from RevenueCat\n      const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}`, {\n        headers: {\n          'Authorization': `Bearer ${finalApiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return res.status(response.status).json({ error: errorText });\n      }\n\n      const data = await response.json();\n      res.json(data);\n    } catch (error) {\n      console.error(\"RevenueCat API error:\", error);\n      res.status(500).json({ error: \"Failed to fetch subscriber details\" });\n    }\n  });\n\n  // Grant entitlement to a user\n  app.post(\"/api/revenuecat/grant-entitlement\", async (req, res) => {\n    try {\n      const { apiKey, userId, entitlementId, duration } = req.body;\n      const finalApiKey = apiKey === 'from_env' ? process.env.REVENUECAT_SECRET_API_KEY : apiKey;\n      \n      if (!finalApiKey) {\n        return res.status(400).json({ error: \"API key is required\" });\n      }\n\n      if (!userId || !entitlementId) {\n        return res.status(400).json({ error: \"User ID and entitlement ID are required\" });\n      }\n\n      // Convert duration to RevenueCat format\n      let durationValue;\n      if (duration === 'lifetime' || !duration) {\n        durationValue = 'lifetime';\n      } else {\n        const durationDays = parseInt(duration);\n        if (durationDays === 30) durationValue = 'monthly';\n        else if (durationDays === 60) durationValue = 'two_month';\n        else if (durationDays === 90) durationValue = 'three_month';\n        else if (durationDays === 365) durationValue = 'yearly';\n        else durationValue = `P${durationDays}D`; // ISO 8601 duration format\n      }\n\n      // Grant entitlement using RevenueCat promotional entitlement API\n      const payload = {\n        duration: durationValue\n      };\n\n      console.log(`Granting entitlement \"${entitlementId}\" to user \"${userId}\" with duration \"${durationValue}\"`);\n\n      const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}/entitlements/${encodeURIComponent(entitlementId)}/promotional`, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${finalApiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return res.status(response.status).json({ error: errorText });\n      }\n\n      const data = await response.json();\n      res.json({ \n        success: true, \n        message: `Entitlement \"${entitlementId}\" granted to user \"${userId}\"`,\n        data \n      });\n    } catch (error) {\n      console.error(\"RevenueCat grant entitlement error:\", error);\n      res.status(500).json({ error: \"Failed to grant entitlement\" });\n    }\n  });\n\n  // Test subscriber endpoint\n  app.post(\"/api/revenuecat/test-subscriber\", async (req, res) => {\n    try {\n      const { apiKey, userId } = req.body;\n      const finalApiKey = apiKey === 'from_env' ? process.env.REVENUECAT_SECRET_API_KEY : apiKey;\n      \n      if (!finalApiKey) {\n        return res.status(400).json({ error: \"API key is required\" });\n      }\n\n      if (!userId) {\n        return res.status(400).json({ error: \"User ID is required\" });\n      }\n\n      // Fetch subscriber details from RevenueCat\n      const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}`, {\n        headers: {\n          'Authorization': `Bearer ${finalApiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return res.status(response.status).json({ error: errorText });\n      }\n\n      const data = await response.json();\n      res.json(data);\n    } catch (error) {\n      console.error(\"RevenueCat test subscriber error:\", error);\n      res.status(500).json({ error: \"Failed to test subscriber\" });\n    }\n  });\n\n  app.delete(\"/api/revenuecat/subscriber/:userId\", async (req, res) => {\n    try {\n      const { apiKey } = req.body;\n      const { userId } = req.params;\n      \n      if (!apiKey) {\n        return res.status(400).json({ error: \"API key is required\" });\n      }\n\n      // Delete subscriber from RevenueCat\n      const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${apiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        return res.status(response.status).json({ error: errorText });\n      }\n\n      const data = await response.json();\n      res.json(data);\n    } catch (error) {\n      console.error(\"RevenueCat API error:\", error);\n      res.status(500).json({ error: \"Failed to delete subscriber\" });\n    }\n  });\n\n  // Test endpoint to fetch a specific subscriber\n  app.post(\"/api/revenuecat/test-subscriber\", async (req, res) => {\n    try {\n      const { apiKey, userId } = req.body;\n      const finalApiKey = apiKey === 'from_env' ? process.env.REVENUECAT_SECRET_API_KEY : apiKey;\n      \n      if (!finalApiKey || !userId) {\n        return res.status(400).json({ error: \"API key and user ID are required\" });\n      }\n\n      console.log(`Testing RevenueCat API for user: ${userId}`);\n      \n      const response = await fetch(`https://api.revenuecat.com/v1/subscribers/${encodeURIComponent(userId)}`, {\n        headers: {\n          'Authorization': `Bearer ${finalApiKey}`,\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error(`RevenueCat API error (${response.status}):`, errorText);\n        return res.status(response.status).json({ \n          error: errorText, \n          status: response.status,\n          userId: userId \n        });\n      }\n\n      const data = await response.json();\n      console.log(`Successfully fetched data for user: ${userId}`);\n      res.json(data);\n    } catch (error) {\n      console.error(\"RevenueCat API error:\", error);\n      res.status(500).json({ error: \"Failed to test subscriber API\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9085},"server/storage.ts":{"content":"import { users, type User, type InsertUser, type Food, type InsertFood, type Meal, type InsertMeal } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Food operations\n  getFoods(): Promise<Food[]>;\n  getFood(id: string): Promise<Food | undefined>;\n  createFood(food: InsertFood): Promise<Food>;\n  updateFood(id: string, food: Partial<InsertFood>): Promise<Food>;\n  deleteFood(id: string): Promise<void>;\n  \n  // Meal operations\n  getMeals(): Promise<Meal[]>;\n  getMeal(id: string): Promise<Meal | undefined>;\n  createMeal(meal: InsertMeal): Promise<Meal>;\n  updateMeal(id: string, meal: Partial<InsertMeal>): Promise<Meal>;\n  deleteMeal(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  private foods: Map<string, Food>;\n  private meals: Map<string, Meal>;\n  currentId: number;\n  currentFoodId: number;\n  currentMealId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.foods = new Map();\n    this.meals = new Map();\n    this.currentId = 1;\n    this.currentFoodId = 1;\n    this.currentMealId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Food operations\n  async getFoods(): Promise<Food[]> {\n    return Array.from(this.foods.values());\n  }\n\n  async getFood(id: string): Promise<Food | undefined> {\n    return this.foods.get(id);\n  }\n\n  async createFood(insertFood: InsertFood): Promise<Food> {\n    const id = `food_${this.currentFoodId++}`;\n    const now = new Date();\n    const food: Food = {\n      ...insertFood,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.foods.set(id, food);\n    return food;\n  }\n\n  async updateFood(id: string, updateFood: Partial<InsertFood>): Promise<Food> {\n    const existingFood = this.foods.get(id);\n    if (!existingFood) {\n      throw new Error(`Food with id ${id} not found`);\n    }\n    \n    const updatedFood: Food = {\n      ...existingFood,\n      ...updateFood,\n      updatedAt: new Date(),\n    };\n    this.foods.set(id, updatedFood);\n    return updatedFood;\n  }\n\n  async deleteFood(id: string): Promise<void> {\n    this.foods.delete(id);\n  }\n\n  // Meal operations\n  async getMeals(): Promise<Meal[]> {\n    return Array.from(this.meals.values());\n  }\n\n  async getMeal(id: string): Promise<Meal | undefined> {\n    return this.meals.get(id);\n  }\n\n  async createMeal(insertMeal: InsertMeal): Promise<Meal> {\n    const id = `meal_${this.currentMealId++}`;\n    const now = new Date();\n    const meal: Meal = {\n      ...insertMeal,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.meals.set(id, meal);\n    return meal;\n  }\n\n  async updateMeal(id: string, updateMeal: Partial<InsertMeal>): Promise<Meal> {\n    const existingMeal = this.meals.get(id);\n    if (!existingMeal) {\n      throw new Error(`Meal with id ${id} not found`);\n    }\n    \n    const updatedMeal: Meal = {\n      ...existingMeal,\n      ...updateMeal,\n      updatedAt: new Date(),\n    };\n    this.meals.set(id, updatedMeal);\n    return updatedMeal;\n  }\n\n  async deleteMeal(id: string): Promise<void> {\n    this.meals.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":3764},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\nexport const foodSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Food name is required\"),\n  kurdishName: z.string().optional(),\n  arabicName: z.string().optional(),\n  baseName: z.string().min(1, \"Base name is required\"),\n  brand: z.string().optional(),\n  category: z.enum([\n    \"fruits\",\n    \"vegetables\", \n    \"grains\",\n    \"proteins\",\n    \"dairy\",\n    \"beverages\",\n    \"snacks\",\n    \"condiments\",\n    \"protein supplements\"\n  ]),\n  foodType: z.enum([\"solid\", \"liquid\"]),\n  availableUnits: z.array(z.enum([\"ml\", \"l\", \"g\", \"cup\", \"tbsp\", \"tsp\", \"plate\", \"fist\", \"piece\"])).optional(),\n  // Nutrition facts per 100g (solid) or 100ml (liquid)\n  nutritionPer100: z.object({\n    calories: z.number().min(0, \"Calories must be non-negative\"),\n    protein: z.number().min(0).optional(),\n    carbs: z.number().min(0).optional(),\n    fat: z.number().min(0).optional(),\n    fiber: z.number().min(0).optional(),\n    sugar: z.number().min(0).optional(),\n    sodium: z.number().min(0).optional(),\n    calcium: z.number().min(0).optional(),\n    potassium: z.number().min(0).optional(),\n    vitaminB12: z.number().min(0).optional(),\n    vitaminA: z.number().min(0).optional(),\n    vitaminE: z.number().min(0).optional(),\n    vitaminD: z.number().min(0).optional(),\n    vitaminC: z.number().min(0).optional(),\n    iron: z.number().min(0).optional(),\n    magnesium: z.number().min(0).optional()\n  }),\n  // Custom conversion overrides for variable serving sizes\n  customConversions: z.object({\n    cup: z.number().positive().optional(), // grams/ml per cup\n    plate: z.number().positive().optional(), // grams/ml per plate\n    fist: z.number().positive().optional(), // grams/ml per fist\n    piece: z.number().positive().optional(), // grams/ml per piece\n    tbsp: z.number().positive().optional(), // grams/ml per tablespoon\n    tsp: z.number().positive().optional() // grams/ml per teaspoon\n  }).optional(),\n  vegetarian: z.boolean().optional(),\n  vegan: z.boolean().optional(),\n  glutenFree: z.boolean().optional(),\n  dairyFree: z.boolean().optional(),\n  mealPlanner: z.boolean().optional(),\n  allowDuplication: z.boolean().optional(),\n  lowCalorie: z.boolean().optional(),\n  calorieAdjustment: z.boolean().optional(),\n  minPortion: z.number().min(0).optional(),\n  maxPortion: z.number().min(0).optional(),\n  mealTiming: z.array(z.enum([\"morning\", \"lunch\", \"dinner\"])).optional(),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n});\n\nexport const insertFoodSchema = foodSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Food = z.infer<typeof foodSchema>;\nexport type InsertFood = z.infer<typeof insertFoodSchema>;\n\n// Category display names and colors\nexport const categoryConfig = {\n  fruits: { label: \"Fruits\", color: \"bg-green-100 text-green-800\" },\n  vegetables: { label: \"Vegetables\", color: \"bg-green-100 text-green-800\" },\n  grains: { label: \"Grains\", color: \"bg-yellow-100 text-yellow-800\" },\n  proteins: { label: \"Proteins\", color: \"bg-blue-100 text-blue-800\" },\n  dairy: { label: \"Dairy\", color: \"bg-purple-100 text-purple-800\" },\n  beverages: { label: \"Beverages\", color: \"bg-cyan-100 text-cyan-800\" },\n  snacks: { label: \"Snacks\", color: \"bg-orange-100 text-orange-800\" },\n  condiments: { label: \"Condiments\", color: \"bg-gray-100 text-gray-800\" },\n  \"protein supplements\": { label: \"Protein Supplements\", color: \"bg-red-100 text-red-800\" },\n};\n\n// Serving units configuration based on food type\nexport const servingUnitsConfig = {\n  solid: [\n    { value: \"g\", label: \"grams (g)\" },\n    { value: \"cup\", label: \"cup\" },\n    { value: \"tbsp\", label: \"tablespoon (tbsp)\" },\n    { value: \"tsp\", label: \"teaspoon (tsp)\" },\n    { value: \"plate\", label: \"plate\" },\n    { value: \"fist\", label: \"fist\" },\n    { value: \"piece\", label: \"piece\" }\n  ],\n  liquid: [\n    { value: \"ml\", label: \"milliliters (ml)\" },\n    { value: \"l\", label: \"liters (l)\" },\n    { value: \"cup\", label: \"cup\" },\n    { value: \"tbsp\", label: \"tablespoon (tbsp)\" },\n    { value: \"tsp\", label: \"teaspoon (tsp)\" }\n  ]\n};\n\n// All available serving units for multi-serving support\nexport const allServingUnits = [\n  { value: \"ml\", label: \"milliliters (ml)\" },\n  { value: \"l\", label: \"liters (l)\" },\n  { value: \"g\", label: \"grams (g)\" },\n  { value: \"cup\", label: \"cup\" },\n  { value: \"tbsp\", label: \"tablespoon (tbsp)\" },\n  { value: \"tsp\", label: \"teaspoon (tsp)\" },\n  { value: \"plate\", label: \"plate\" },\n  { value: \"fist\", label: \"fist\" },\n  { value: \"piece\", label: \"piece\" }\n];\n\n// Meal timing options for when food is appropriate\nexport const mealTimingOptions = [\n  { value: \"morning\", label: \"Morning/Breakfast\" },\n  { value: \"lunch\", label: \"Lunch\" },\n  { value: \"dinner\", label: \"Dinner\" }\n];\n\n// Food-specific conversion tables for better accuracy\nexport const foodSpecificConversions: Record<string, { cup: number | null, plate: number | null, piece: number | null }> = {\n  // Grains & Cereals\n  \"rice\": { cup: 185, plate: 200, piece: null },\n  \"pasta\": { cup: 220, plate: 180, piece: null },\n  \"oatmeal\": { cup: 240, plate: 200, piece: null },\n  \"quinoa\": { cup: 170, plate: 150, piece: null },\n  \"bread\": { cup: null, plate: null, piece: 25 },\n  \n  // Fruits\n  \"apple\": { cup: 125, plate: null, piece: 180 },\n  \"banana\": { cup: 150, plate: null, piece: 120 },\n  \"orange\": { cup: 180, plate: null, piece: 150 },\n  \"grapes\": { cup: 150, plate: 200, piece: 5 },\n  \"strawberry\": { cup: 150, plate: 200, piece: 15 },\n  \"blueberry\": { cup: 150, plate: 200, piece: 1 },\n  \n  // Vegetables\n  \"broccoli\": { cup: 90, plate: 150, piece: 25 },\n  \"potato\": { cup: 150, plate: 200, piece: 200 },\n  \"carrot\": { cup: 130, plate: 150, piece: 60 },\n  \"tomato\": { cup: 180, plate: 200, piece: 120 },\n  \"onion\": { cup: 160, plate: 180, piece: 100 },\n  \"cucumber\": { cup: 120, plate: 150, piece: 300 },\n  \n  // Proteins\n  \"chicken\": { cup: null, plate: 200, piece: 150 },\n  \"beef\": { cup: null, plate: 200, piece: 100 },\n  \"fish\": { cup: null, plate: 180, piece: 120 },\n  \"egg\": { cup: null, plate: null, piece: 50 },\n  \"tofu\": { cup: 250, plate: 200, piece: 85 },\n  \n  // Dairy\n  \"cheese\": { cup: 115, plate: null, piece: 30 },\n  \"yogurt\": { cup: 245, plate: null, piece: null },\n  \n  // Nuts & Seeds\n  \"almond\": { cup: 140, plate: null, piece: 1 },\n  \"walnut\": { cup: 120, plate: null, piece: 3 },\n  \"peanut\": { cup: 150, plate: null, piece: 1 }\n};\n\n// Size variants for highly variable items\nexport const sizeVariants = {\n  \"apple\": {\n    \"piece_small\": 120,\n    \"piece_medium\": 180,\n    \"piece_large\": 240\n  },\n  \"potato\": {\n    \"piece_small\": 150,\n    \"piece_medium\": 200,\n    \"piece_large\": 300\n  },\n  \"banana\": {\n    \"piece_small\": 90,\n    \"piece_medium\": 120,\n    \"piece_large\": 150\n  },\n  \"egg\": {\n    \"piece_small\": 40,\n    \"piece_medium\": 50,\n    \"piece_large\": 60\n  }\n};\n\n// Helper function to detect food type from name\nfunction detectFoodType(foodName: string): string | null {\n  const name = foodName.toLowerCase();\n  for (const [key] of Object.entries(foodSpecificConversions)) {\n    if (name.includes(key)) {\n      return key;\n    }\n  }\n  return null;\n}\n\n// Conversion utility function with food-specific accuracy\nexport function calculateNutritionForServing(\n  food: Food,\n  servingSize: number,\n  servingUnit: string\n): {\n  calories: number;\n  protein?: number;\n  carbs?: number;\n  fat?: number;\n  fiber?: number;\n  sugar?: number;\n  sodium?: number;\n} {\n  const baseAmount = food.foodType === \"solid\" ? 100 : 100; // 100g or 100ml\n  \n  // Convert serving to grams/ml equivalent\n  let gramsOrMl = servingSize;\n  \n  // Default conversions (fallback)\n  const defaultConversions: Record<string, number> = {\n    // Liquid conversions (to ml)\n    \"l\": 1000,\n    \"ml\": 1,\n    \"cup\": food.foodType === \"liquid\" ? 240 : 200, // 240ml for liquids, 200g for solids\n    \"tbsp\": food.foodType === \"liquid\" ? 15 : 12,  // 15ml for liquids, 12g for solids\n    \"tsp\": food.foodType === \"liquid\" ? 5 : 4,     // 5ml for liquids, 4g for solids\n    \n    // Solid conversions (to grams)\n    \"g\": 1,\n    \"plate\": 200,  // default plate size\n    \"fist\": 80,    // default fist size\n    \"piece\": 50    // default piece size\n  };\n  \n  // Get food-specific conversions\n  const foodType = detectFoodType(food.name);\n  const foodSpecific = foodType ? (foodSpecificConversions[foodType] || {}) : {};\n  \n  // Priority: custom conversions > food-specific > defaults\n  const conversions = {\n    ...defaultConversions,\n    ...foodSpecific,\n    ...(food.customConversions || {})\n  };\n  \n  // Apply conversion if available\n  const conversionValue = conversions[servingUnit as keyof typeof conversions];\n  if (conversionValue !== undefined && conversionValue !== null) {\n    gramsOrMl = servingSize * conversionValue;\n  }\n  \n  // Calculate ratio compared to base amount (100g/100ml)\n  const ratio = gramsOrMl / baseAmount;\n  \n  // Apply ratio to all nutrition values\n  return {\n    calories: Math.round(food.nutritionPer100.calories * ratio),\n    protein: food.nutritionPer100.protein ? Math.round((food.nutritionPer100.protein * ratio) * 10) / 10 : undefined,\n    carbs: food.nutritionPer100.carbs ? Math.round((food.nutritionPer100.carbs * ratio) * 10) / 10 : undefined,\n    fat: food.nutritionPer100.fat ? Math.round((food.nutritionPer100.fat * ratio) * 10) / 10 : undefined,\n    fiber: food.nutritionPer100.fiber ? Math.round((food.nutritionPer100.fiber * ratio) * 10) / 10 : undefined,\n    sugar: food.nutritionPer100.sugar ? Math.round((food.nutritionPer100.sugar * ratio) * 10) / 10 : undefined,\n    sodium: food.nutritionPer100.sodium ? Math.round((food.nutritionPer100.sodium * ratio) * 10) / 10 : undefined\n  };\n}\n\n// Helper function to get suggested conversion values for a food\nexport function getSuggestedConversions(foodName: string, foodType: \"solid\" | \"liquid\") {\n  const detectedType = detectFoodType(foodName);\n  if (detectedType && foodSpecificConversions[detectedType]) {\n    return foodSpecificConversions[detectedType];\n  }\n  \n  // Return null for no suggestions (will use defaults)\n  return null;\n}\n\n// Meals Schema\nexport const mealFoodSchema = z.object({\n  foodId: z.string(),\n  basePortion: z.number().positive(),\n  role: z.enum([\"protein_primary\", \"carb_primary\", \"filler\", \"fat_primary\", \"vegetable\", \"fruit\", \"snack\"]),\n  allowedPortions: z.array(z.number().positive()).optional()\n});\n\nexport const mealSchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Meal name is required\"),\n  mealArabicName: z.string().optional(),\n  mealKurdishName: z.string().optional(),\n  mealType: z.array(z.enum([\"breakfast\", \"lunch\", \"dinner\", \"snack\"])).min(1, \"At least one meal type is required\"),\n  foods: z.array(mealFoodSchema),\n  baseCalories: z.number().min(0),\n  baseProtein: z.number().min(0),\n  baseCarbs: z.number().min(0),\n  baseFat: z.number().min(0),\n  minScale: z.number().min(0.1).max(1),\n  maxScale: z.number().min(1).max(5),\n  prepTime: z.number().min(0),\n  difficulty: z.enum([\"easy\", \"medium\", \"hard\"]),\n  cultural: z.array(z.enum([\"arabic\", \"kurdish\", \"western\", \"mediterranean\", \"asian\"])),\n  tags: z.array(z.string()),\n  createdAt: z.date(),\n  updatedAt: z.date(),\n  isActive: z.boolean()\n});\n\nexport const insertMealSchema = mealSchema.omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\nexport type Meal = z.infer<typeof mealSchema>;\nexport type InsertMeal = z.infer<typeof insertMealSchema>;\nexport type MealFood = z.infer<typeof mealFoodSchema>;\n\n// Workout Schema\nexport const workoutCategorySchema = z.object({\n  id: z.string(),\n  name: z.string().min(1, \"Category name is required\"),\n  nameKurdish: z.string().optional(),\n  nameArabic: z.string().optional(),\n  iconUrl: z.string().optional(),\n  iconName: z.string().optional(),\n  order: z.number().min(1)\n});\n\nexport const workoutSubcategorySchema = z.object({\n  id: z.string(),\n  categoryId: z.string(),\n  name: z.string().min(1, \"Subcategory name is required\"),\n  nameKurdish: z.string().optional(),\n  nameArabic: z.string().optional(),\n  iconUrl: z.string().optional(),\n  iconName: z.string().optional(),\n  order: z.number().min(1)\n});\n\nexport const exerciseSchema = z.object({\n  id: z.string(),\n  categoryId: z.string(),\n  subcategoryId: z.string().optional(),\n  name: z.string().min(1, \"Exercise name is required\"),\n  nameKurdish: z.string().optional(),\n  nameArabic: z.string().optional(),\n  description: z.string().optional(),\n  videoUrl: z.string().optional(),\n  thumbnailUrl: z.string().optional(),\n  muscleGroups: z.array(z.string()).optional().default([]),\n  bodyTarget: z.string().optional(),\n  difficulty: z.enum([\"beginner\", \"intermediate\", \"advanced\"]).optional().default(\"beginner\"),\n  equipment: z.string().optional(),\n  order: z.number().min(1).optional().default(1)\n});\n\nexport const workoutPlanExerciseSchema = z.object({\n  exerciseId: z.string(),\n  categoryId: z.string(),\n  sets: z.number().min(1),\n  reps: z.number().min(1),\n  notes: z.string().optional(),\n  order: z.number().min(1)\n});\n\nexport const workoutPlanSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  name: z.string().min(1, \"Workout plan name is required\"),\n  createdAt: z.date(),\n  exercises: z.array(workoutPlanExerciseSchema)\n});\n\nexport const workoutSessionSchema = z.object({\n  id: z.string(),\n  userId: z.string(),\n  planId: z.string(),\n  startTime: z.date(),\n  endTime: z.date().optional(),\n  completedExercises: z.array(z.string()),\n  totalTime: z.number().min(0)\n});\n\nexport const insertWorkoutCategorySchema = workoutCategorySchema.omit({\n  id: true\n});\n\nexport const insertWorkoutSubcategorySchema = workoutSubcategorySchema.omit({\n  id: true\n});\n\nexport const insertExerciseSchema = exerciseSchema.omit({\n  id: true,\n  categoryId: true,\n  subcategoryId: true\n}).extend({\n  categoryId: z.string().optional(),\n  subcategoryId: z.string().optional()\n});\n\nexport const insertWorkoutPlanSchema = workoutPlanSchema.omit({\n  id: true,\n  createdAt: true\n});\n\nexport const insertWorkoutSessionSchema = workoutSessionSchema.omit({\n  id: true\n});\n\nexport type WorkoutCategory = z.infer<typeof workoutCategorySchema>;\nexport type WorkoutSubcategory = z.infer<typeof workoutSubcategorySchema>;\nexport type Exercise = z.infer<typeof exerciseSchema>;\nexport type WorkoutPlan = z.infer<typeof workoutPlanSchema>;\nexport type WorkoutSession = z.infer<typeof workoutSessionSchema>;\nexport type WorkoutPlanExercise = z.infer<typeof workoutPlanExerciseSchema>;\nexport type InsertWorkoutCategory = z.infer<typeof insertWorkoutCategorySchema>;\nexport type InsertWorkoutSubcategory = z.infer<typeof insertWorkoutSubcategorySchema>;\nexport type InsertExercise = z.infer<typeof insertExerciseSchema>;\nexport type InsertWorkoutPlan = z.infer<typeof insertWorkoutPlanSchema>;\nexport type InsertWorkoutSession = z.infer<typeof insertWorkoutSessionSchema>;\n","size_bytes":14748},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport FoodsManager from \"@/pages/foods-manager\";\nimport MealsManager from \"@/pages/meals-manager\";\nimport WorkoutPlans from \"@/pages/workout-plans\";\nimport RevenueCatUsers from \"@/pages/revenuecat-users\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport { useState, useEffect } from \"react\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={FoodsManager} />\n      <Route path=\"/meals\" component={MealsManager} />\n      <Route path=\"/workout-plans\" component={WorkoutPlans} />\n      <Route path=\"/revenuecat-users\" component={RevenueCatUsers} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is already authenticated\n    const authenticated = localStorage.getItem(\"isAuthenticated\") === \"true\";\n    setIsAuthenticated(authenticated);\n    setIsLoading(false);\n  }, []);\n\n  const handleLogin = () => {\n    setIsAuthenticated(true);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <TooltipProvider>\n          <Login onLogin={handleLogin} />\n          <Toaster />\n        </TooltipProvider>\n      </QueryClientProvider>\n    );\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2017},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n/* Custom styles for the foods manager */\n.foods-manager {\n  font-family: 'Roboto', sans-serif;\n}\n\n/* Loading spinner animation */\n@keyframes spin {\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin {\n  animation: spin 1s linear infinite;\n}\n\n/* Pulse animation for connection status */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Ensure proper spacing and typography */\n.font-roboto {\n  font-family: 'Roboto', sans-serif;\n}\n\n/* Custom primary color matching the design */\n.text-primary {\n  color: hsl(207, 90%, 54%);\n}\n\n.bg-primary {\n  background-color: hsl(207, 90%, 54%);\n}\n\n.border-primary {\n  border-color: hsl(207, 90%, 54%);\n}\n\n.hover\\:bg-blue-700:hover {\n  background-color: hsl(207, 90%, 44%);\n}\n\n.hover\\:text-blue-700:hover {\n  color: hsl(207, 90%, 44%);\n}\n\n/* Success/error colors */\n.text-success {\n  color: hsl(122, 39%, 49%);\n}\n\n.bg-success {\n  background-color: hsl(122, 39%, 49%);\n}\n\n.text-error {\n  color: hsl(0, 84%, 60%);\n}\n\n.bg-error {\n  background-color: hsl(0, 84%, 60%);\n}\n\n.text-warning {\n  color: hsl(38, 92%, 50%);\n}\n\n.bg-warning {\n  background-color: hsl(38, 92%, 50%);\n}\n","size_bytes":2953},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/bulk-actions-bar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { Edit, Download, Trash2, X } from \"lucide-react\";\n\ninterface BulkActionsBarProps {\n  selectedCount: number;\n  onClearSelection: () => void;\n  onBulkDelete: () => void;\n  onBulkExport: () => void;\n  isVisible: boolean;\n  isLoading: boolean;\n}\n\nexport function BulkActionsBar({\n  selectedCount,\n  onClearSelection,\n  onBulkDelete,\n  onBulkExport,\n  isVisible,\n  isLoading,\n}: BulkActionsBarProps) {\n  if (!isVisible) return null;\n\n  return (\n    <div className=\"fixed bottom-6 left-1/2 transform -translate-x-1/2 bg-white rounded-lg shadow-lg border border-gray-200 px-6 py-3 z-40\">\n      <div className=\"flex items-center space-x-4\">\n        <span className=\"text-sm text-gray-700\">\n          <span className=\"font-medium\">{selectedCount}</span> items selected\n        </span>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={onBulkExport}\n            disabled={isLoading}\n          >\n            <Download className=\"h-4 w-4 mr-1\" />\n            Export\n          </Button>\n          <Button\n            variant=\"destructive\"\n            size=\"sm\"\n            onClick={onBulkDelete}\n            disabled={isLoading}\n          >\n            {isLoading && <LoadingSpinner size=\"sm\" className=\"mr-1\" />}\n            <Trash2 className=\"h-4 w-4 mr-1\" />\n            Delete\n          </Button>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={onClearSelection}\n          disabled={isLoading}\n        >\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1748},"client/src/components/delete-confirmation-modal.tsx":{"content":"import { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { AlertTriangle } from \"lucide-react\";\n\ninterface DeleteConfirmationModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  foodName: string;\n  onConfirm: () => void;\n  isLoading: boolean;\n}\n\nexport function DeleteConfirmationModal({\n  isOpen,\n  onClose,\n  foodName,\n  onConfirm,\n  isLoading,\n}: DeleteConfirmationModalProps) {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <div className=\"p-6\">\n          <div className=\"flex items-center justify-center w-12 h-12 mx-auto bg-red-100 rounded-full mb-4\">\n            <AlertTriangle className=\"text-red-600 text-xl\" />\n          </div>\n          <h3 className=\"text-lg font-medium text-gray-900 text-center mb-2\">\n            Delete Food Item\n          </h3>\n          <p className=\"text-sm text-gray-500 text-center mb-6\">\n            Are you sure you want to delete{\" \"}\n            <span className=\"font-medium\">\"{foodName}\"</span>? This action cannot be undone.\n          </p>\n          <div className=\"flex items-center justify-center space-x-3\">\n            <Button variant=\"outline\" onClick={onClose} disabled={isLoading}>\n              Cancel\n            </Button>\n            <Button\n              variant=\"destructive\"\n              onClick={onConfirm}\n              disabled={isLoading}\n            >\n              {isLoading && <LoadingSpinner size=\"sm\" className=\"mr-2\" />}\n              Delete Item\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":1712},"client/src/components/food-form-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertFoodSchema, type Food, type InsertFood } from \"@shared/schema\";\n\nimport { categoryConfig, allServingUnits, mealTimingOptions, getSuggestedConversions } from \"@shared/schema\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Plus, Minus } from \"lucide-react\";\n\ninterface FoodFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  food?: Food | null;\n  onSubmit: (data: InsertFood) => void;\n  isLoading: boolean;\n}\n\nexport function FoodFormModal({ isOpen, onClose, food, onSubmit, isLoading }: FoodFormModalProps) {\n  const getDefaultValues = () => {\n    const defaultFoodType = food?.foodType || \"solid\";\n    const defaultUnits = defaultFoodType === \"liquid\" \n      ? [\"ml\", \"l\", \"cup\", \"tbsp\", \"tsp\"] as const\n      : [\"g\", \"cup\", \"tbsp\", \"tsp\", \"plate\", \"fist\", \"piece\"] as const;\n    \n    return {\n      name: food?.name || \"\",\n      kurdishName: food?.kurdishName || \"\",\n      arabicName: food?.arabicName || \"\",\n      baseName: food?.baseName || \"\",\n      brand: food?.brand || \"\",\n      category: food?.category || \"fruits\",\n      foodType: defaultFoodType,\n      availableUnits: food?.availableUnits || [],\n      nutritionPer100: {\n        calories: food?.nutritionPer100?.calories || 0,\n        protein: food?.nutritionPer100?.protein || 0,\n        carbs: food?.nutritionPer100?.carbs || 0,\n        fat: food?.nutritionPer100?.fat || 0,\n        fiber: food?.nutritionPer100?.fiber || 0,\n        sugar: food?.nutritionPer100?.sugar || 0,\n        sodium: food?.nutritionPer100?.sodium || 0,\n        calcium: food?.nutritionPer100?.calcium || 0,\n        potassium: food?.nutritionPer100?.potassium || 0,\n        vitaminB12: food?.nutritionPer100?.vitaminB12 || 0,\n        vitaminA: food?.nutritionPer100?.vitaminA || 0,\n        vitaminE: food?.nutritionPer100?.vitaminE || 0,\n        vitaminD: food?.nutritionPer100?.vitaminD || 0,\n        vitaminC: food?.nutritionPer100?.vitaminC || 0,\n        iron: food?.nutritionPer100?.iron || 0,\n        magnesium: food?.nutritionPer100?.magnesium || 0,\n      },\n      customConversions: food?.customConversions || {},\n      vegetarian: food?.vegetarian || false,\n      vegan: food?.vegan || false,\n      glutenFree: food?.glutenFree || false,\n      dairyFree: food?.dairyFree || false,\n      mealPlanner: food?.mealPlanner || false,\n      allowDuplication: food?.allowDuplication || false,\n      lowCalorie: food?.lowCalorie || false,\n      calorieAdjustment: food?.calorieAdjustment || false,\n      minPortion: food?.minPortion || undefined,\n      maxPortion: food?.maxPortion || undefined,\n      mealTiming: food?.mealTiming || [],\n    };\n  };\n\n  const form = useForm<InsertFood>({\n    defaultValues: getDefaultValues(),\n    mode: \"onChange\"\n  });\n\n  // Reset form when modal opens with different food\n  useEffect(() => {\n    if (isOpen) {\n      form.reset(getDefaultValues());\n    }\n  }, [isOpen, food?.id]);\n\n  const foodType = form.watch(\"foodType\");\n\n\n\n  const handleSubmit = (data: InsertFood) => {\n    // Clean all undefined values for Firebase compatibility\n    const cleanCustomConversions = Object.fromEntries(\n      Object.entries(data.customConversions || {}).filter(([_, value]) => value !== undefined && value !== null)\n    );\n    \n    // Set appropriate default units based on food type\n    const defaultUnits = data.foodType === \"liquid\" \n      ? [\"ml\", \"l\", \"cup\", \"tbsp\", \"tsp\"] as const\n      : [\"g\", \"cup\", \"tbsp\", \"tsp\", \"plate\", \"fist\", \"piece\"] as const;\n    \n    const cleanData = {\n      ...data,\n      availableUnits: data.availableUnits?.filter(Boolean) || [...defaultUnits] as (\"ml\" | \"l\" | \"g\" | \"cup\" | \"tbsp\" | \"tsp\" | \"plate\" | \"fist\" | \"piece\")[],\n      customConversions: cleanCustomConversions,\n      // Remove undefined portion values for Firebase compatibility\n      minPortion: data.minPortion !== undefined ? data.minPortion : undefined,\n      maxPortion: data.maxPortion !== undefined ? data.maxPortion : undefined,\n    };\n    \n    // Remove undefined fields entirely\n    if (cleanData.minPortion === undefined) delete cleanData.minPortion;\n    if (cleanData.maxPortion === undefined) delete cleanData.maxPortion;\n    onSubmit(cleanData);\n  };\n\n  // Available serving units based on food type\n  const availableServingUnits = allServingUnits.filter(unit => {\n    if (foodType === \"liquid\") {\n      return ![\"plate\", \"fist\", \"piece\"].includes(unit.value);\n    }\n    return ![\"ml\", \"l\"].includes(unit.value);\n  });\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>{food ? \"Edit Food Item\" : \"Add New Food Item\"}</DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900\">Basic Information</h4>\n              \n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Name (English) *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"White Rice\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"kurdishName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Kurdish Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"برنج سپی\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"arabicName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Arabic Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"أرز أبيض\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"baseName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Base Name *</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"chicken, rice, apple...\" {...field} />\n                    </FormControl>\n                    <FormDescription>\n                      Simple food name for meal planning (e.g., \"chicken\" for all chicken types)\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"brand\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Brand</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Uncle Ben's\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"category\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {Object.entries(categoryConfig).map(([key, config]) => (\n                            <SelectItem key={key} value={key}>\n                              {config.label}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"foodType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Food Type *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger>\n                            <SelectValue placeholder=\"Select type\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"solid\">Solid</SelectItem>\n                          <SelectItem value=\"liquid\">Liquid</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Available Units */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-gray-900\">Available Units</h4>\n                <p className=\"text-sm text-gray-500\">Which units can this food be measured in?</p>\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"availableUnits\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <div className=\"grid grid-cols-3 gap-3\">\n                        {availableServingUnits.map((unit) => (\n                          <div key={unit.value} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={unit.value}\n                              checked={field.value?.includes(unit.value as any) || false}\n                              onCheckedChange={(checked) => {\n                                const currentUnits = field.value || [];\n                                if (checked) {\n                                  field.onChange([...currentUnits, unit.value as any]);\n                                } else {\n                                  field.onChange(currentUnits.filter(u => u !== unit.value));\n                                }\n                              }}\n                            />\n                            <Label htmlFor={unit.value} className=\"text-sm\">\n                              {unit.label}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Nutrition Information */}\n            <div className=\"space-y-4\">\n              <h4 className=\"font-medium text-gray-900\">\n                Nutrition Facts per 100{foodType === \"solid\" ? \"g\" : \"ml\"}\n              </h4>\n              \n              <FormField\n                control={form.control}\n                name=\"nutritionPer100.calories\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Calories *</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        step=\"0.1\" \n                        placeholder=\"0\"\n                        {...field}\n                        onChange={(e) => field.onChange(Number(e.target.value))}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-3 gap-3\">\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.protein\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Protein (g)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.carbs\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Carbs (g)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.fat\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Fat (g)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-3\">\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.fiber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Fiber (g)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.sugar\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sugar (g)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nutritionPer100.sodium\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Sodium (mg)</FormLabel>\n                      <FormControl>\n                        <Input \n                          type=\"number\" \n                          step=\"0.1\" \n                          placeholder=\"0\"\n                          {...field}\n                          onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Vitamins and Minerals */}\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-gray-900\">Vitamins & Minerals</h4>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.calcium\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Calcium (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.potassium\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Potassium (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.vitaminB12\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vitamin B12 (μg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.vitaminA\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vitamin A (μg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.vitaminE\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vitamin E (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.vitaminD\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vitamin D (μg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.01\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.vitaminC\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Vitamin C (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.iron\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Iron (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"nutritionPer100.magnesium\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Magnesium (mg)</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"0\" \n                            {...field}\n                            onChange={(e) => field.onChange(e.target.value ? Number(e.target.value) : undefined)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Custom Serving Conversions */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-gray-900\">Custom Serving Conversions</h4>\n                <p className=\"text-sm text-gray-500\">Override default weights for more accuracy</p>\n              </div>\n              \n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <p className=\"text-sm text-gray-600 mb-3\">\n                  Set custom weights for this specific food. Leave blank to use smart defaults.\n                </p>\n                <div className=\"grid grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.cup\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 cup = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined || field.value === null ? \"\" : String(field.value)}\n                            onChange={(e) => {\n                              const value = e.target.value.trim();\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = parseFloat(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.plate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 plate = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = Number(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.piece\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 piece = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = Number(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 mt-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.fist\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 fist = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = Number(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.tbsp\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 tbsp = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = Number(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 gap-4 mt-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"customConversions.tsp\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>1 tsp = ? {foodType === \"solid\" ? \"grams\" : \"ml\"}</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\" \n                            step=\"0.1\" \n                            placeholder=\"Auto\"\n                            value={field.value === undefined ? \"\" : field.value}\n                            onChange={(e) => {\n                              const value = e.target.value;\n                              if (value === \"\") {\n                                field.onChange(undefined);\n                              } else {\n                                const numValue = Number(value);\n                                field.onChange(isNaN(numValue) ? undefined : numValue);\n                              }\n                            }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Dietary Information */}\n            <div className=\"space-y-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-medium text-gray-900\">Dietary Information</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"vegetarian\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Vegetarian</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"vegan\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Vegan</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"glutenFree\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Gluten Free</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"dairyFree\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Dairy Free</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"mealPlanner\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Include in Meal Planner</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"allowDuplication\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Allow Duplication</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"lowCalorie\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Low Calorie</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"calorieAdjustment\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                        <FormLabel>Calorie Adjustment</FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Portion Size Range */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium text-gray-900\">Portion Size Range (grams)</h4>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"minPortion\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Minimum Portion (g)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"1\" \n                              placeholder=\"e.g. 30\"\n                              value={field.value || \"\"}\n                              onChange={(e) => {\n                                const value = e.target.value.trim();\n                                if (value === \"\") {\n                                  field.onChange(undefined);\n                                } else {\n                                  const numValue = parseInt(value);\n                                  field.onChange(isNaN(numValue) ? undefined : numValue);\n                                }\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"maxPortion\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Maximum Portion (g)</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              step=\"1\" \n                              placeholder=\"e.g. 100\"\n                              value={field.value || \"\"}\n                              onChange={(e) => {\n                                const value = e.target.value.trim();\n                                if (value === \"\") {\n                                  field.onChange(undefined);\n                                } else {\n                                  const numValue = parseInt(value);\n                                  field.onChange(isNaN(numValue) ? undefined : numValue);\n                                }\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Meal Timing */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-medium text-gray-900\">Meal Timing</h4>\n                <p className=\"text-sm text-gray-500\">When is this food appropriate?</p>\n              </div>\n              \n              <FormField\n                control={form.control}\n                name=\"mealTiming\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <div className=\"grid grid-cols-3 gap-4\">\n                        {mealTimingOptions.map((timing) => (\n                          <div key={timing.value} className=\"flex items-center space-x-2\">\n                            <Checkbox\n                              id={timing.value}\n                              checked={field.value?.includes(timing.value as any) || false}\n                              onCheckedChange={(checked) => {\n                                const currentTimings = field.value || [];\n                                if (checked) {\n                                  field.onChange([...currentTimings, timing.value as any]);\n                                } else {\n                                  field.onChange(currentTimings.filter(t => t !== timing.value));\n                                }\n                              }}\n                            />\n                            <Label htmlFor={timing.value} className=\"text-sm font-medium\">\n                              {timing.label}\n                            </Label>\n                          </div>\n                        ))}\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Submit Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-4 border-t\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading && <LoadingSpinner size=\"sm\" className=\"mr-2\" />}\n                {food ? \"Update Food\" : \"Add Food\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":44552},"client/src/components/foods-table.tsx":{"content":"import { Food, categoryConfig } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Edit, Copy, Trash2, ChevronUp, ChevronDown } from \"lucide-react\";\n\ninterface FoodsTableProps {\n  foods: Food[];\n  selectedFoods: Set<string>;\n  onSelectionChange: (selected: Set<string>) => void;\n  onEdit: (food: Food) => void;\n  onDelete: (food: Food) => void;\n  onSort: (field: keyof Food) => void;\n  sortBy: keyof Food;\n  sortOrder: \"asc\" | \"desc\";\n}\n\nexport function FoodsTable({\n  foods,\n  selectedFoods,\n  onSelectionChange,\n  onEdit,\n  onDelete,\n  onSort,\n  sortBy,\n  sortOrder,\n}: FoodsTableProps) {\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      onSelectionChange(new Set(foods.map(food => food.id)));\n    } else {\n      onSelectionChange(new Set());\n    }\n  };\n\n  const handleSelectFood = (foodId: string, checked: boolean) => {\n    const newSelected = new Set(selectedFoods);\n    if (checked) {\n      newSelected.add(foodId);\n    } else {\n      newSelected.delete(foodId);\n    }\n    onSelectionChange(newSelected);\n  };\n\n  const handleDuplicate = (food: Food) => {\n    // Create a copy of the food without the id\n    const { id, createdAt, updatedAt, ...foodData } = food;\n    onEdit({\n      ...foodData,\n      name: `${food.name} (Copy)`,\n      id: \"\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    } as Food);\n  };\n\n  const SortButton = ({ field, children }: { field: keyof Food; children: React.ReactNode }) => (\n    <button\n      onClick={() => onSort(field)}\n      className=\"flex items-center space-x-1 hover:bg-gray-100 px-2 py-1 rounded transition-colors\"\n    >\n      <span>{children}</span>\n      {sortBy === field && (\n        sortOrder === \"asc\" ? <ChevronUp className=\"h-4 w-4\" /> : <ChevronDown className=\"h-4 w-4\" />\n      )}\n    </button>\n  );\n\n  return (\n    <div className=\"flex-1 overflow-auto bg-white\">\n      <table className=\"w-full\">\n        <thead className=\"bg-gray-50 sticky top-0\">\n          <tr>\n            <th className=\"px-6 py-3 text-left\">\n              <Checkbox\n                checked={foods.length > 0 && selectedFoods.size === foods.length}\n                onCheckedChange={handleSelectAll}\n              />\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              <SortButton field=\"name\">Food Name</SortButton>\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              <SortButton field=\"category\">Category</SortButton>\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Servings\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Calories\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Nutrition\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              <SortButton field=\"updatedAt\">Last Modified</SortButton>\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n              Actions\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {foods.length === 0 ? (\n            <tr>\n              <td colSpan={8} className=\"px-6 py-12 text-center text-gray-500\">\n                No food items found. Add your first food item to get started.\n              </td>\n            </tr>\n          ) : (\n            foods.map((food) => (\n              <tr key={food.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <Checkbox\n                    checked={selectedFoods.has(food.id)}\n                    onCheckedChange={(checked) => handleSelectFood(food.id, checked as boolean)}\n                  />\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-10 h-10 rounded-lg bg-gray-100 flex items-center justify-center mr-3\">\n                      <span className=\"text-xl\">🍎</span>\n                    </div>\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900\">{food.name}</div>\n                      {food.kurdishName && (\n                        <div className=\"text-sm text-gray-600 font-medium\">{food.kurdishName}</div>\n                      )}\n                      {food.arabicName && (\n                        <div className=\"text-sm text-gray-600 font-medium\">{food.arabicName}</div>\n                      )}\n                      {food.baseName && (\n                        <div className=\"text-xs text-blue-600 bg-blue-50 px-2 py-1 rounded mt-1 inline-block\">\n                          Base: {food.baseName}\n                        </div>\n                      )}\n                      {food.brand && (\n                        <div className=\"text-sm text-gray-500\">{food.brand}</div>\n                      )}\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${categoryConfig[food.category]?.color || \"bg-gray-100 text-gray-800\"}`}>\n                    {categoryConfig[food.category]?.label || food.category}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  <div className=\"space-y-1\">\n                    {food.availableUnits && food.availableUnits.length > 0 ? (\n                      <div className=\"text-xs\">\n                        {food.availableUnits.join(\", \")}\n                      </div>\n                    ) : (\n                      <div className=\"text-xs text-gray-400\">No units defined</div>\n                    )}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {food.nutritionPer100?.calories || (food as any).calories || 0} kcal\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  <div className=\"space-y-1\">\n                    <div>Protein: <span className=\"font-medium\">{food.nutritionPer100?.protein || (food as any).protein || 0}g</span></div>\n                    <div>Carbs: <span className=\"font-medium\">{food.nutritionPer100?.carbs || (food as any).carbs || 0}g</span></div>\n                    <div>Fat: <span className=\"font-medium\">{food.nutritionPer100?.fat || (food as any).fat || 0}g</span></div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                  {food.updatedAt.toLocaleDateString()}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onEdit(food)}\n                      className=\"text-primary hover:text-blue-700\"\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleDuplicate(food)}\n                      className=\"text-gray-400 hover:text-gray-600\"\n                    >\n                      <Copy className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => onDelete(food)}\n                      className=\"text-red-400 hover:text-red-600\"\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </td>\n              </tr>\n            ))\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","size_bytes":8520},"client/src/components/meal-form-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { collection, getDocs, query as firestoreQuery, orderBy } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { insertMealSchema, type InsertMeal, type Meal, type Food, type MealFood } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Plus, Search, Trash2, Edit, Check } from \"lucide-react\";\n\ninterface MealFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  meal?: Meal | null;\n  onSubmit: (data: InsertMeal) => void;\n  isLoading: boolean;\n}\n\nconst formSchema = insertMealSchema.extend({\n  tags: z.array(z.string()).optional(),\n  cultural: z.array(z.string()).optional(),\n});\n\nexport function MealFormModal({ isOpen, onClose, meal, onSubmit, isLoading }: MealFormModalProps) {\n  const [newTag, setNewTag] = useState(\"\");\n  const [selectedCultures, setSelectedCultures] = useState<string[]>([]);\n  const [selectedMealTypes, setSelectedMealTypes] = useState<string[]>([]);\n  const [tags, setTags] = useState<string[]>([]);\n  const [mealFoods, setMealFoods] = useState<MealFood[]>([]);\n  const [foodSearch, setFoodSearch] = useState(\"\");\n  const [selectedFoodId, setSelectedFoodId] = useState(\"\");\n  const [newFoodPortion, setNewFoodPortion] = useState(\"\");\n  const [newFoodRole, setNewFoodRole] = useState<\"protein_primary\" | \"carb_primary\" | \"fat_primary\" | \"filler\">(\"protein_primary\");\n  const [newAllowedPortions, setNewAllowedPortions] = useState(\"\");\n  const [editingPortions, setEditingPortions] = useState<{ [key: number]: string }>({});\n\n  // Initialize form data when meal prop changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (meal) {\n        setSelectedCultures(meal.cultural || []);\n        setSelectedMealTypes(Array.isArray(meal.mealType) ? meal.mealType : [meal.mealType]);\n        setTags(meal.tags || []);\n        setMealFoods(meal.foods || []);\n      } else {\n        setSelectedCultures([]);\n        setSelectedMealTypes([\"breakfast\"]);\n        setTags([]);\n        setMealFoods([]);\n      }\n      // Reset search states\n      setFoodSearch(\"\");\n      setSelectedFoodId(\"\");\n      setNewFoodPortion(\"\");\n      setNewFoodRole(\"protein_primary\");\n      setNewAllowedPortions(\"\");\n      setNewTag(\"\");\n      setEditingPortions({});\n    }\n  }, [meal, isOpen]);\n\n  // Fetch ALL foods for meal form - don't use cached data with limits\n  const { data: foods = [] } = useQuery<Food[]>({\n    queryKey: [\"/api/foods-all\"],\n    queryFn: async () => {\n      const foodsCollection = collection(db, \"foods\");\n      const q = firestoreQuery(foodsCollection, orderBy(\"name\")); // No limit - get all foods\n      const snapshot = await getDocs(q);\n      \n      return snapshot.docs.map(doc => {\n        const data = doc.data();\n        console.log('Loading food for meal form:', data.name || 'Unknown');\n        \n        // Ensure proper data structure - same as foods manager\n        return {\n          id: doc.id,\n          name: data.name || '',\n          kurdishName: data.kurdishName,\n          arabicName: data.arabicName,\n          baseName: data.baseName || '',\n          brand: data.brand,\n          category: data.category,\n          foodType: data.foodType,\n          availableUnits: data.availableUnits,\n          // Ensure nutritionPer100 is properly structured\n          nutritionPer100: data.nutritionPer100 ? {\n            calories: Number(data.nutritionPer100.calories) || 0,\n            protein: data.nutritionPer100.protein ? Number(data.nutritionPer100.protein) : undefined,\n            carbs: data.nutritionPer100.carbs ? Number(data.nutritionPer100.carbs) : undefined,\n            fat: data.nutritionPer100.fat ? Number(data.nutritionPer100.fat) : undefined,\n            fiber: data.nutritionPer100.fiber ? Number(data.nutritionPer100.fiber) : undefined,\n            sugar: data.nutritionPer100.sugar ? Number(data.nutritionPer100.sugar) : undefined,\n            sodium: data.nutritionPer100.sodium ? Number(data.nutritionPer100.sodium) : undefined,\n            calcium: data.nutritionPer100.calcium ? Number(data.nutritionPer100.calcium) : undefined,\n            potassium: data.nutritionPer100.potassium ? Number(data.nutritionPer100.potassium) : undefined,\n            vitaminB12: data.nutritionPer100.vitaminB12 ? Number(data.nutritionPer100.vitaminB12) : undefined,\n            vitaminA: data.nutritionPer100.vitaminA ? Number(data.nutritionPer100.vitaminA) : undefined,\n            vitaminE: data.nutritionPer100.vitaminE ? Number(data.nutritionPer100.vitaminE) : undefined,\n            vitaminD: data.nutritionPer100.vitaminD ? Number(data.nutritionPer100.vitaminD) : undefined,\n            vitaminC: data.nutritionPer100.vitaminC ? Number(data.nutritionPer100.vitaminC) : undefined,\n            iron: data.nutritionPer100.iron ? Number(data.nutritionPer100.iron) : undefined,\n            magnesium: data.nutritionPer100.magnesium ? Number(data.nutritionPer100.magnesium) : undefined,\n          } : {\n            calories: 0\n          },\n          customConversions: data.customConversions,\n          vegetarian: data.vegetarian,\n          vegan: data.vegan,\n          glutenFree: data.glutenFree,\n          dairyFree: data.dairyFree,\n          mealPlanner: data.mealPlanner,\n          allowDuplication: data.allowDuplication,\n          lowCalorie: data.lowCalorie,\n          calorieAdjustment: data.calorieAdjustment,\n          minPortion: data.minPortion,\n          maxPortion: data.maxPortion,\n          mealTiming: data.mealTiming,\n          createdAt: data.createdAt?.toDate() || new Date(),\n          updatedAt: data.updatedAt?.toDate() || new Date(),\n        } as Food;\n      });\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes cache\n  });\n\n  const form = useForm<InsertMeal>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      mealArabicName: \"\",\n      mealKurdishName: \"\",\n      mealType: [\"breakfast\"],\n      foods: [],\n      baseCalories: 0,\n      baseProtein: 0,\n      baseCarbs: 0,\n      baseFat: 0,\n      minScale: 0.5,\n      maxScale: 2.0,\n      prepTime: 0,\n      difficulty: \"easy\",\n      cultural: [],\n      tags: [],\n      isActive: true,\n    },\n  });\n\n  // Reset form when meal changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (meal) {\n        form.reset({\n          name: meal.name || \"\",\n          mealArabicName: meal.mealArabicName || \"\",\n          mealKurdishName: meal.mealKurdishName || \"\",\n          mealType: Array.isArray(meal.mealType) ? meal.mealType : [meal.mealType || \"breakfast\"],\n          foods: meal.foods || [],\n          baseCalories: meal.baseCalories || 0,\n          baseProtein: meal.baseProtein || 0,\n          baseCarbs: meal.baseCarbs || 0,\n          baseFat: meal.baseFat || 0,\n          minScale: meal.minScale || 0.5,\n          maxScale: meal.maxScale || 2.0,\n          prepTime: meal.prepTime || 0,\n          difficulty: meal.difficulty || \"easy\",\n          cultural: meal.cultural || [],\n          tags: meal.tags || [],\n          isActive: meal.isActive ?? true,\n        });\n      } else {\n        form.reset({\n          name: \"\",\n          mealArabicName: \"\",\n          mealKurdishName: \"\",\n          mealType: [\"breakfast\"],\n          foods: [],\n          baseCalories: 0,\n          baseProtein: 0,\n          baseCarbs: 0,\n          baseFat: 0,\n          minScale: 0.5,\n          maxScale: 2.0,\n          prepTime: 0,\n          difficulty: \"easy\",\n          cultural: [],\n          tags: [],\n          isActive: true,\n        });\n      }\n      // Clear form validation errors\n      form.clearErrors();\n    }\n  }, [meal, form, isOpen]);\n\n  const handleSubmit = (data: InsertMeal) => {\n    onSubmit({\n      ...data,\n      mealType: selectedMealTypes,\n      foods: mealFoods,\n      cultural: selectedCultures,\n      tags: tags,\n    });\n  };\n\n  // Filter foods based on search\n  const filteredFoods = foods.filter(food => \n    food.name.toLowerCase().includes(foodSearch.toLowerCase()) ||\n    food.kurdishName?.toLowerCase().includes(foodSearch.toLowerCase()) ||\n    food.arabicName?.toLowerCase().includes(foodSearch.toLowerCase())\n  );\n\n  // Add food to meal\n  const addFoodToMeal = () => {\n    if (selectedFoodId && newFoodPortion) {\n      // Parse allowed portions from comma-separated string\n      const allowedPortions = newAllowedPortions\n        .split(',')\n        .map(p => parseFloat(p.trim()))\n        .filter(p => !isNaN(p) && p > 0);\n      \n      const newFood: MealFood = {\n        foodId: selectedFoodId,\n        basePortion: parseFloat(newFoodPortion),\n        role: newFoodRole,\n        allowedPortions: allowedPortions.length > 0 ? allowedPortions : undefined,\n      };\n      const updatedFoods = [...mealFoods, newFood];\n      setMealFoods(updatedFoods);\n      setSelectedFoodId(\"\");\n      setNewFoodPortion(\"\");\n      setNewAllowedPortions(\"\");\n      setFoodSearch(\"\");\n    }\n  };\n\n  // Remove food from meal\n  const removeFoodFromMeal = (index: number) => {\n    const updatedFoods = mealFoods.filter((_, i) => i !== index);\n    setMealFoods(updatedFoods);\n  };\n\n  // Get food name by ID with better logging\n  const getFoodName = (foodId: string) => {\n    const food = foods.find(f => f.id === foodId);\n    if (!food) {\n      console.warn(`Food not found for ID: ${foodId}. Available foods: ${foods.length}. Loading all foods...`);\n      return `Loading... (${foodId})`;\n    }\n    return food.name || food.id;\n  };\n\n  // Calculate base nutrition from all foods in the meal\n  const calculateBaseNutrition = () => {\n    let totalCalories = 0;\n    let totalProtein = 0;\n    let totalCarbs = 0;\n    let totalFat = 0;\n\n    mealFoods.forEach(mealFood => {\n      const food = foods.find(f => f.id === mealFood.foodId);\n      if (food && food.nutritionPer100) {\n        // Formula: (nutritionPer100g × basePortion) ÷ 100\n        const calories = (food.nutritionPer100.calories * mealFood.basePortion) / 100;\n        const protein = ((food.nutritionPer100.protein || 0) * mealFood.basePortion) / 100;\n        const carbs = ((food.nutritionPer100.carbs || 0) * mealFood.basePortion) / 100;\n        const fat = ((food.nutritionPer100.fat || 0) * mealFood.basePortion) / 100;\n\n        totalCalories += calories;\n        totalProtein += protein;\n        totalCarbs += carbs;\n        totalFat += fat;\n      }\n    });\n\n    return {\n      calories: Math.round(totalCalories * 10) / 10,\n      protein: Math.round(totalProtein * 10) / 10,\n      carbs: Math.round(totalCarbs * 10) / 10,\n      fat: Math.round(totalFat * 10) / 10,\n    };\n  };\n\n  // Update form values when foods change\n  const updateNutritionValues = () => {\n    const nutrition = calculateBaseNutrition();\n    form.setValue(\"baseCalories\", nutrition.calories);\n    form.setValue(\"baseProtein\", nutrition.protein);\n    form.setValue(\"baseCarbs\", nutrition.carbs);\n    form.setValue(\"baseFat\", nutrition.fat);\n  };\n\n  // Recalculate nutrition when foods change\n  useEffect(() => {\n    if (foods.length > 0) {\n      updateNutritionValues();\n    }\n  }, [mealFoods, foods]);\n\n  const addTag = () => {\n    if (newTag.trim() && !tags.includes(newTag.trim())) {\n      setTags([...tags, newTag.trim()]);\n      setNewTag(\"\");\n    }\n  };\n\n  const removeTag = (tagToRemove: string) => {\n    setTags(tags.filter(tag => tag !== tagToRemove));\n  };\n\n  // Start editing allowed portions for a specific meal food\n  const startEditingPortions = (index: number) => {\n    const currentPortions = mealFoods[index].allowedPortions || [];\n    setEditingPortions({\n      ...editingPortions,\n      [index]: currentPortions.join(', ')\n    });\n  };\n\n  // Save edited allowed portions\n  const saveEditedPortions = (index: number) => {\n    const portionsText = editingPortions[index] || '';\n    const allowedPortions = portionsText\n      .split(',')\n      .map(p => parseFloat(p.trim()))\n      .filter(p => !isNaN(p) && p > 0);\n    \n    const updatedFoods = [...mealFoods];\n    updatedFoods[index] = {\n      ...updatedFoods[index],\n      allowedPortions: allowedPortions.length > 0 ? allowedPortions : undefined,\n    };\n    setMealFoods(updatedFoods);\n    \n    // Clear editing state\n    const newEditingPortions = { ...editingPortions };\n    delete newEditingPortions[index];\n    setEditingPortions(newEditingPortions);\n  };\n\n  // Cancel editing allowed portions\n  const cancelEditingPortions = (index: number) => {\n    const newEditingPortions = { ...editingPortions };\n    delete newEditingPortions[index];\n    setEditingPortions(newEditingPortions);\n  };\n\n  const toggleCulture = (culture: string) => {\n    setSelectedCultures(prev => \n      prev.includes(culture) \n        ? prev.filter(c => c !== culture)\n        : [...prev, culture]\n    );\n  };\n\n  const toggleMealType = (mealType: string) => {\n    setSelectedMealTypes(prev => \n      prev.includes(mealType) \n        ? prev.filter(mt => mt !== mealType)\n        : [...prev, mealType]\n    );\n  };\n\n  const culturalOptions = [\"arabic\", \"kurdish\", \"western\", \"mediterranean\", \"asian\"];\n  const mealTypeOptions = [\"breakfast\", \"lunch\", \"dinner\", \"snack\"];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {meal ? \"Edit Meal\" : \"Add New Meal\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          {/* Basic Information */}\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-1 gap-4\">\n              <div>\n                <Label htmlFor=\"name\">Meal Name (English)*</Label>\n                <Input\n                  id=\"name\"\n                  {...form.register(\"name\")}\n                  placeholder=\"e.g., Protein Power Breakfast\"\n                />\n                {form.formState.errors.name && (\n                  <p className=\"text-sm text-red-500\">{form.formState.errors.name.message}</p>\n                )}\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"mealArabicName\">Arabic Name</Label>\n                  <Input\n                    id=\"mealArabicName\"\n                    {...form.register(\"mealArabicName\")}\n                    placeholder=\"e.g., فطار البروتين القوي\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"mealKurdishName\">Kurdish Name</Label>\n                  <Input\n                    id=\"mealKurdishName\"\n                    {...form.register(\"mealKurdishName\")}\n                    placeholder=\"e.g., نان ی پڕوتین\"\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Classification */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Meal Types*</Label>\n              <div className=\"flex flex-wrap gap-2 mt-2\">\n                {mealTypeOptions.map((mealType) => (\n                  <Badge\n                    key={mealType}\n                    variant={selectedMealTypes.includes(mealType) ? \"default\" : \"outline\"}\n                    className=\"cursor-pointer\"\n                    onClick={() => toggleMealType(mealType)}\n                  >\n                    {mealType}\n                  </Badge>\n                ))}\n              </div>\n              {selectedMealTypes.length === 0 && (\n                <p className=\"text-sm text-red-500 mt-1\">At least one meal type is required</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"difficulty\">Difficulty*</Label>\n              <Select \n                value={form.watch(\"difficulty\")} \n                onValueChange={(value) => form.setValue(\"difficulty\", value as any)}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select difficulty\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"easy\">Easy</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"hard\">Hard</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Nutrition Information */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"font-semibold\">Base Nutrition (per serving)</h3>\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                Auto-calculated from foods\n              </Badge>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"baseCalories\">Calories*</Label>\n                <Input\n                  id=\"baseCalories\"\n                  type=\"number\"\n                  {...form.register(\"baseCalories\", { valueAsNumber: true })}\n                  placeholder=\"Auto-calculated\"\n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"baseProtein\">Protein (g)*</Label>\n                <Input\n                  id=\"baseProtein\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  {...form.register(\"baseProtein\", { valueAsNumber: true })}\n                  placeholder=\"Auto-calculated\"\n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"baseCarbs\">Carbs (g)*</Label>\n                <Input\n                  id=\"baseCarbs\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  {...form.register(\"baseCarbs\", { valueAsNumber: true })}\n                  placeholder=\"Auto-calculated\"\n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"baseFat\">Fat (g)*</Label>\n                <Input\n                  id=\"baseFat\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  {...form.register(\"baseFat\", { valueAsNumber: true })}\n                  placeholder=\"Auto-calculated\"\n                  readOnly\n                  className=\"bg-gray-50\"\n                />\n              </div>\n            </div>\n            <p className=\"text-sm text-gray-600\">\n              Nutrition values are calculated using: (nutritionPer100g × basePortion) ÷ 100, then summed for all foods.\n            </p>\n          </div>\n\n          {/* Scaling & Metadata */}\n          <div className=\"grid grid-cols-3 gap-4\">\n            <div>\n              <Label htmlFor=\"minScale\">Min Scale*</Label>\n              <Input\n                id=\"minScale\"\n                type=\"number\"\n                step=\"0.1\"\n                {...form.register(\"minScale\", { valueAsNumber: true })}\n                placeholder=\"e.g., 0.5\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"maxScale\">Max Scale*</Label>\n              <Input\n                id=\"maxScale\"\n                type=\"number\"\n                step=\"0.1\"\n                {...form.register(\"maxScale\", { valueAsNumber: true })}\n                placeholder=\"e.g., 2.5\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"prepTime\">Prep Time (minutes)*</Label>\n              <Input\n                id=\"prepTime\"\n                type=\"number\"\n                {...form.register(\"prepTime\", { valueAsNumber: true })}\n                placeholder=\"e.g., 10\"\n              />\n            </div>\n          </div>\n\n          {/* Foods Management */}\n          <div className=\"space-y-4\">\n            <h3 className=\"font-semibold\">Foods in this Meal</h3>\n            \n            {/* Add New Food */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm\">Add Food</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"space-y-2\">\n                  <Label>Search Food</Label>\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      placeholder=\"Search foods...\"\n                      value={foodSearch}\n                      onChange={(e) => setFoodSearch(e.target.value)}\n                      className=\"pl-10\"\n                    />\n                  </div>\n                  {foodSearch && filteredFoods.length > 0 && (\n                    <div className=\"max-h-40 overflow-y-auto border rounded-md\">\n                      {filteredFoods.slice(0, 10).map((food) => (\n                        <div\n                          key={food.id}\n                          className=\"p-2 hover:bg-gray-50 cursor-pointer border-b last:border-b-0\"\n                          onClick={() => {\n                            setSelectedFoodId(food.id);\n                            setFoodSearch(food.name);\n                          }}\n                        >\n                          <div className=\"font-medium\">{food.name}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {food.arabicName && <span>{food.arabicName}</span>}\n                            {food.kurdishName && <span> • {food.kurdishName}</span>}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div>\n                    <Label>Base Portion (g)</Label>\n                    <Input\n                      type=\"number\"\n                      placeholder=\"e.g., 120\"\n                      value={newFoodPortion}\n                      onChange={(e) => setNewFoodPortion(e.target.value)}\n                    />\n                  </div>\n                  <div>\n                    <Label>Role</Label>\n                    <Select value={newFoodRole} onValueChange={setNewFoodRole}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"protein_primary\">Protein Primary</SelectItem>\n                        <SelectItem value=\"carb_primary\">Carb Primary</SelectItem>\n                        <SelectItem value=\"fat_primary\">Fat Primary</SelectItem>\n                        <SelectItem value=\"filler\">Filler</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <div>\n                  <Label>Allowed Portions (g)</Label>\n                  <Input\n                    placeholder=\"e.g., 120, 190, 250\"\n                    value={newAllowedPortions}\n                    onChange={(e) => setNewAllowedPortions(e.target.value)}\n                  />\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Comma-separated values (optional)\n                  </p>\n                </div>\n\n                <Button\n                  type=\"button\"\n                  onClick={addFoodToMeal}\n                  disabled={!selectedFoodId || !newFoodPortion}\n                  className=\"w-full\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Food to Meal\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Current Foods in Meal */}\n            {mealFoods.length > 0 && (\n              <div className=\"space-y-2\">\n                <Label>Current Foods ({mealFoods.length})</Label>\n                <div className=\"space-y-2\">\n                  {mealFoods.map((mealFood, index) => {\n                    const food = foods.find(f => f.id === mealFood.foodId);\n                    const calories = food && food.nutritionPer100 ? Math.round(((food.nutritionPer100.calories * mealFood.basePortion) / 100) * 10) / 10 : 0;\n                    const protein = food && food.nutritionPer100 ? Math.round((((food.nutritionPer100.protein || 0) * mealFood.basePortion) / 100) * 10) / 10 : 0;\n                    \n                    return (\n                      <div\n                        key={index}\n                        className=\"flex items-start justify-between p-3 bg-gray-50 rounded-lg\"\n                      >\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium\">{getFoodName(mealFood.foodId)}</div>\n                          <div className=\"text-sm text-gray-500\">\n                            {mealFood.basePortion}g • {mealFood.role.replace('_', ' ')}\n                          </div>\n                          <div className=\"text-xs text-gray-400\">\n                            Contributes: {calories} cal, {protein}g protein\n                          </div>\n                          \n                          {/* Allowed Portions - Show inline editor if editing, otherwise show current values */}\n                          {editingPortions[index] !== undefined ? (\n                            <div className=\"mt-2 flex items-center space-x-2\">\n                              <Input\n                                value={editingPortions[index]}\n                                onChange={(e) => setEditingPortions({\n                                  ...editingPortions,\n                                  [index]: e.target.value\n                                })}\n                                placeholder=\"e.g., 120, 190, 250\"\n                                className=\"h-8 text-xs\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => saveEditedPortions(index)}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <Check className=\"h-3 w-3\" />\n                              </Button>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => cancelEditingPortions(index)}\n                                className=\"h-8 w-8 p-0\"\n                              >\n                                <X className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          ) : (\n                            <div className=\"flex items-center justify-between mt-1\">\n                              <div className=\"text-xs text-blue-600\">\n                                Allowed portions: {mealFood.allowedPortions && mealFood.allowedPortions.length > 0 \n                                  ? mealFood.allowedPortions.join(', ') + 'g' \n                                  : 'None set'\n                                }\n                              </div>\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => startEditingPortions(index)}\n                                className=\"h-6 w-6 p-0 ml-2\"\n                              >\n                                <Edit className=\"h-3 w-3\" />\n                              </Button>\n                            </div>\n                          )}\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => removeFoodFromMeal(index)}\n                          className=\"ml-2\"\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Cultural Tags */}\n          <div className=\"space-y-3\">\n            <Label>Cultural Classifications</Label>\n            <div className=\"flex flex-wrap gap-2\">\n              {culturalOptions.map((culture) => (\n                <Badge\n                  key={culture}\n                  variant={selectedCultures.includes(culture) ? \"default\" : \"outline\"}\n                  className=\"cursor-pointer\"\n                  onClick={() => toggleCulture(culture)}\n                >\n                  {culture}\n                </Badge>\n              ))}\n            </div>\n          </div>\n\n          {/* Tags */}\n          <div className=\"space-y-3\">\n            <Label>Tags</Label>\n            <div className=\"flex gap-2\">\n              <Input\n                value={newTag}\n                onChange={(e) => setNewTag(e.target.value)}\n                placeholder=\"Add a tag...\"\n                onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTag())}\n              />\n              <Button type=\"button\" onClick={addTag} variant=\"outline\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            {tags.length > 0 && (\n              <div className=\"flex flex-wrap gap-2\">\n                {tags.map((tag) => (\n                  <Badge key={tag} variant=\"secondary\" className=\"cursor-pointer\">\n                    {tag}\n                    <X \n                      className=\"h-3 w-3 ml-1\" \n                      onClick={() => removeTag(tag)}\n                    />\n                  </Badge>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading}>\n              {isLoading ? \"Saving...\" : meal ? \"Update Meal\" : \"Add Meal\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":31001},"client/src/components/workout-category-form-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertWorkoutCategorySchema, type InsertWorkoutCategory, type WorkoutCategory } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\ninterface WorkoutCategoryFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  category?: WorkoutCategory | null;\n  onSubmit: (data: InsertWorkoutCategory) => void;\n  isLoading: boolean;\n}\n\nexport function WorkoutCategoryFormModal({ isOpen, onClose, category, onSubmit, isLoading }: WorkoutCategoryFormModalProps) {\n  const form = useForm<InsertWorkoutCategory>({\n    resolver: zodResolver(insertWorkoutCategorySchema),\n    defaultValues: {\n      name: \"\",\n      nameKurdish: \"\",\n      nameArabic: \"\",\n      iconUrl: \"\",\n      iconName: \"\",\n      order: 1,\n    },\n  });\n\n  // Reset form when category changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (category) {\n        form.reset({\n          name: category.name || \"\",\n          nameKurdish: category.nameKurdish || \"\",\n          nameArabic: category.nameArabic || \"\",\n          iconUrl: category.iconUrl || \"\",\n          iconName: category.iconName || \"\",\n          order: category.order || 1,\n        });\n      } else {\n        form.reset({\n          name: \"\",\n          nameKurdish: \"\",\n          nameArabic: \"\",\n          iconUrl: \"\",\n          iconName: \"\",\n          order: 1,\n        });\n      }\n      // Clear form validation errors\n      form.clearErrors();\n    }\n  }, [category, form, isOpen]);\n\n  const handleSubmit = (data: InsertWorkoutCategory) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {category ? \"Edit Workout Category\" : \"Create New Workout Category\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name (English)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Chest, Back, Legs\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The English name of the workout category\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameKurdish\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name (Kurdish)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Kurdish name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Kurdish name of the workout category (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameArabic\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category Name (Arabic)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Arabic name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Arabic name of the workout category (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"iconUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Icon URL (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"https://example.com/icon.png\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      URL to an icon image\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"iconName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Icon Name (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"e.g., dumbbell, heart, target\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Name of the icon to display\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"order\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Order</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"number\"\n                      min=\"1\"\n                      placeholder=\"1\"\n                      className=\"w-full\"\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Display order for this category (lower numbers appear first)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"Saving...\" : category ? \"Update Category\" : \"Create Category\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7265},"client/src/components/workout-exercise-form-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertExerciseSchema, type InsertExercise, type Exercise } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Plus } from \"lucide-react\";\n\ninterface WorkoutExerciseFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  exercise?: Exercise | null;\n  onSubmit: (data: InsertExercise) => void;\n  isLoading: boolean;\n}\n\nexport function WorkoutExerciseFormModal({ isOpen, onClose, exercise, onSubmit, isLoading }: WorkoutExerciseFormModalProps) {\n  const form = useForm<InsertExercise>({\n    resolver: zodResolver(insertExerciseSchema),\n    defaultValues: {\n      name: \"\",\n      nameKurdish: \"\",\n      nameArabic: \"\",\n      description: \"\",\n      videoUrl: \"\",\n      thumbnailUrl: \"\",\n      muscleGroups: [],\n      bodyTarget: \"\",\n      difficulty: \"beginner\",\n      equipment: \"\",\n      order: 1,\n    },\n  });\n\n  const { fields, append, remove } = useFieldArray({\n    control: form.control,\n    name: \"muscleGroups\",\n  });\n\n  // Reset form when exercise changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (exercise) {\n        form.reset({\n          name: exercise.name || \"\",\n          nameKurdish: exercise.nameKurdish || \"\",\n          nameArabic: exercise.nameArabic || \"\",\n          description: exercise.description || \"\",\n          videoUrl: exercise.videoUrl || \"\",\n          thumbnailUrl: exercise.thumbnailUrl || \"\",\n          muscleGroups: exercise.muscleGroups || [],\n          bodyTarget: exercise.bodyTarget || \"\",\n          difficulty: exercise.difficulty || \"beginner\",\n          equipment: exercise.equipment || \"\",\n          order: exercise.order || 1,\n        });\n      } else {\n        form.reset({\n          name: \"\",\n          nameKurdish: \"\",\n          nameArabic: \"\",\n          description: \"\",\n          videoUrl: \"\",\n          thumbnailUrl: \"\",\n          muscleGroups: [],\n          bodyTarget: \"\",\n          difficulty: \"beginner\",\n          equipment: \"\",\n          order: 1,\n        });\n      }\n      // Clear form validation errors\n      form.clearErrors();\n    }\n  }, [exercise, form, isOpen]);\n\n  const handleSubmit = (data: InsertExercise) => {\n    // Clean up the data - remove empty muscle groups\n    const cleanedData = {\n      ...data,\n      muscleGroups: data.muscleGroups?.filter(group => group.trim() !== \"\") || [],\n      difficulty: data.difficulty || \"beginner\",\n      order: data.order || 1\n    };\n    \n    onSubmit(cleanedData);\n  };\n\n  const addMuscleGroup = () => {\n    append(\"\");\n  };\n\n  const removeMuscleGroup = (index: number) => {\n    remove(index);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {exercise ? \"Edit Exercise\" : \"Create New Exercise\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Exercise Name (English)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Bench Press, Deadlift, Push-ups\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The English name of the exercise\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameKurdish\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Exercise Name (Kurdish)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Kurdish name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Kurdish name of the exercise (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameArabic\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Exercise Name (Arabic)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Arabic name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Arabic name of the exercise (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      placeholder=\"Describe the exercise, proper form, and technique...\"\n                      className=\"w-full min-h-[100px]\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Detailed description of the exercise\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"videoUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Video URL (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"https://player.vimeo.com/video/123456\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      URL to a video demonstration\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"thumbnailUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Thumbnail URL (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"https://example.com/thumbnail.jpg\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      URL to a thumbnail image\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"bodyTarget\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Body Target</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Upper body, Lower body, Core\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Target body area for this exercise\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"difficulty\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Difficulty</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select difficulty\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"beginner\">Beginner</SelectItem>\n                        <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                        <SelectItem value=\"advanced\">Advanced</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Exercise difficulty level\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"equipment\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Equipment</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Select equipment\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"bodyweight\">Bodyweight</SelectItem>\n                        <SelectItem value=\"barbell\">Barbell</SelectItem>\n                        <SelectItem value=\"dumbbell\">Dumbbell</SelectItem>\n                        <SelectItem value=\"cable\">Cable</SelectItem>\n                        <SelectItem value=\"machine\">Machine</SelectItem>\n                        <SelectItem value=\"kettlebell\">Kettlebell</SelectItem>\n                        <SelectItem value=\"resistance-band\">Resistance Band</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormDescription>\n                      Required equipment\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"order\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Order</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        type=\"number\"\n                        min=\"1\"\n                        placeholder=\"1\"\n                        className=\"w-full\"\n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Display order\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <div className=\"space-y-3\">\n              <FormLabel>Muscle Groups</FormLabel>\n              <div className=\"space-y-2\">\n                {fields.map((field, index) => (\n                  <div key={field.id} className=\"flex items-center space-x-2\">\n                    <Input\n                      placeholder=\"e.g., chest, back, shoulders\"\n                      value={form.watch(`muscleGroups.${index}`) || \"\"}\n                      onChange={(e) => form.setValue(`muscleGroups.${index}`, e.target.value)}\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeMuscleGroup(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addMuscleGroup}\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Muscle Group\n                </Button>\n              </div>\n              <FormDescription>\n                Add the muscle groups this exercise targets\n              </FormDescription>\n            </div>\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"Saving...\" : exercise ? \"Update Exercise\" : \"Create Exercise\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13963},"client/src/components/workout-plan-form-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { collection, getDocs, query as firestoreQuery, orderBy } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { insertWorkoutPlanSchema, type InsertWorkoutPlan, type WorkoutPlan, type WorkoutCategory, type Exercise, type WorkoutPlanExercise } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { X, Plus, Search, Trash2, Edit } from \"lucide-react\";\n\ninterface WorkoutPlanFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  workoutPlan?: WorkoutPlan | null;\n  onSubmit: (data: InsertWorkoutPlan) => void;\n  isLoading: boolean;\n}\n\nconst formSchema = insertWorkoutPlanSchema;\n\nexport function WorkoutPlanFormModal({ isOpen, onClose, workoutPlan, onSubmit, isLoading }: WorkoutPlanFormModalProps) {\n  const [planExercises, setPlanExercises] = useState<WorkoutPlanExercise[]>([]);\n  const [exerciseSearch, setExerciseSearch] = useState(\"\");\n  const [selectedCategoryId, setSelectedCategoryId] = useState(\"all\");\n  const [selectedExerciseId, setSelectedExerciseId] = useState(\"\");\n  const [newSets, setNewSets] = useState(\"\");\n  const [newReps, setNewReps] = useState(\"\");\n  const [newNotes, setNewNotes] = useState(\"\");\n\n  // Fetch workout categories\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/workout-categories\"],\n    queryFn: async () => {\n      const categoriesCollection = collection(db, \"workoutCategories\");\n      const q = firestoreQuery(categoriesCollection, orderBy(\"order\"));\n      const snapshot = await getDocs(q);\n      \n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      })) as WorkoutCategory[];\n    },\n  });\n\n  // Fetch exercises\n  const { data: exercises = [] } = useQuery({\n    queryKey: [\"/api/exercises\"],\n    queryFn: async () => {\n      const allExercises: Exercise[] = [];\n      for (const category of categories) {\n        const exercisesCollection = collection(db, \"workoutCategories\", category.id, \"exercises\");\n        const q = firestoreQuery(exercisesCollection, orderBy(\"order\"));\n        const snapshot = await getDocs(q);\n        \n        const categoryExercises = snapshot.docs.map(doc => ({\n          id: doc.id,\n          categoryId: category.id,\n          ...doc.data(),\n        })) as Exercise[];\n        \n        allExercises.push(...categoryExercises);\n      }\n      return allExercises;\n    },\n    enabled: categories.length > 0,\n  });\n\n  // Initialize form data when workoutPlan prop changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (workoutPlan) {\n        setPlanExercises(workoutPlan.exercises || []);\n      } else {\n        setPlanExercises([]);\n      }\n      // Reset form states\n      setExerciseSearch(\"\");\n      setSelectedCategoryId(\"all\");\n      setSelectedExerciseId(\"\");\n      setNewSets(\"\");\n      setNewReps(\"\");\n      setNewNotes(\"\");\n    }\n  }, [workoutPlan, isOpen]);\n\n  const form = useForm<InsertWorkoutPlan>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      userId: \"demo-user\",\n      name: \"\",\n      exercises: [],\n    },\n  });\n\n  // Reset form when workoutPlan changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (workoutPlan) {\n        form.reset({\n          userId: workoutPlan.userId || \"demo-user\",\n          name: workoutPlan.name || \"\",\n          exercises: workoutPlan.exercises || [],\n        });\n      } else {\n        form.reset({\n          userId: \"demo-user\",\n          name: \"\",\n          exercises: [],\n        });\n      }\n      // Clear form validation errors\n      form.clearErrors();\n    }\n  }, [workoutPlan, form, isOpen]);\n\n  const handleSubmit = (data: InsertWorkoutPlan) => {\n    onSubmit({\n      ...data,\n      exercises: planExercises,\n    });\n  };\n\n  // Filter exercises based on search and category\n  const filteredExercises = exercises.filter(exercise => {\n    const matchesSearch = exercise.name.toLowerCase().includes(exerciseSearch.toLowerCase());\n    const matchesCategory = selectedCategoryId === \"all\" || selectedCategoryId === \"\" || exercise.categoryId === selectedCategoryId;\n    return matchesSearch && matchesCategory;\n  });\n\n  // Add exercise to workout plan\n  const addExerciseToPlane = () => {\n    if (selectedExerciseId && newSets && newReps) {\n      const exercise = exercises.find(ex => ex.id === selectedExerciseId);\n      if (exercise) {\n        const newExercise: WorkoutPlanExercise = {\n          exerciseId: selectedExerciseId,\n          categoryId: exercise.categoryId,\n          sets: parseInt(newSets),\n          reps: parseInt(newReps),\n          notes: newNotes || undefined,\n          order: planExercises.length + 1\n        };\n        setPlanExercises([...planExercises, newExercise]);\n        setSelectedExerciseId(\"\");\n        setNewSets(\"\");\n        setNewReps(\"\");\n        setNewNotes(\"\");\n        setExerciseSearch(\"\");\n        setSelectedCategoryId(\"all\");\n      }\n    }\n  };\n\n  // Remove exercise from workout plan\n  const removeExerciseFromPlan = (index: number) => {\n    const updatedExercises = planExercises.filter((_, i) => i !== index);\n    // Update order numbers\n    const reorderedExercises = updatedExercises.map((exercise, i) => ({\n      ...exercise,\n      order: i + 1\n    }));\n    setPlanExercises(reorderedExercises);\n  };\n\n  // Get exercise name by ID\n  const getExerciseName = (exerciseId: string) => {\n    const exercise = exercises.find(ex => ex.id === exerciseId);\n    return exercise?.name || exerciseId;\n  };\n\n  // Get category name by ID\n  const getCategoryName = (categoryId: string) => {\n    const category = categories.find(cat => cat.id === categoryId);\n    return category?.name || categoryId;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {workoutPlan ? \"Edit Workout Plan\" : \"Create New Workout Plan\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          {/* Plan Name */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"name\">Plan Name</Label>\n            <Input\n              id=\"name\"\n              {...form.register(\"name\")}\n              placeholder=\"e.g., Push Day, Pull Day, Leg Day\"\n              className=\"w-full\"\n            />\n            {form.formState.errors.name && (\n              <p className=\"text-sm text-red-500\">{form.formState.errors.name.message}</p>\n            )}\n          </div>\n\n          {/* Add Exercise Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Add Exercise</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label>Category</Label>\n                  <Select value={selectedCategoryId} onValueChange={setSelectedCategoryId}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">All Categories</SelectItem>\n                      {categories.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Search Exercise</Label>\n                  <Input\n                    placeholder=\"Search exercises...\"\n                    value={exerciseSearch}\n                    onChange={(e) => setExerciseSearch(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Exercise</Label>\n                <Select value={selectedExerciseId} onValueChange={setSelectedExerciseId}>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select exercise\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {filteredExercises.map((exercise) => (\n                      <SelectItem key={exercise.id} value={exercise.id}>\n                        {exercise.name} ({getCategoryName(exercise.categoryId)})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label>Sets</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"3\"\n                    value={newSets}\n                    onChange={(e) => setNewSets(e.target.value)}\n                    min=\"1\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Reps</Label>\n                  <Input\n                    type=\"number\"\n                    placeholder=\"10\"\n                    value={newReps}\n                    onChange={(e) => setNewReps(e.target.value)}\n                    min=\"1\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Notes (Optional)</Label>\n                  <Input\n                    placeholder=\"e.g., Focus on form\"\n                    value={newNotes}\n                    onChange={(e) => setNewNotes(e.target.value)}\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"button\"\n                onClick={addExerciseToPlane}\n                disabled={!selectedExerciseId || !newSets || !newReps}\n                className=\"w-full\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Exercise to Plan\n              </Button>\n            </CardContent>\n          </Card>\n\n          {/* Current Exercises in Plan */}\n          {planExercises.length > 0 && (\n            <div className=\"space-y-2\">\n              <Label>Current Exercises ({planExercises.length})</Label>\n              <div className=\"space-y-2\">\n                {planExercises.map((exercise, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{getExerciseName(exercise.exerciseId)}</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {getCategoryName(exercise.categoryId)} • {exercise.sets} sets × {exercise.reps} reps\n                      </div>\n                      {exercise.notes && (\n                        <div className=\"text-xs text-gray-400 mt-1\">\n                          Notes: {exercise.notes}\n                        </div>\n                      )}\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => removeExerciseFromPlan(index)}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-end space-x-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={isLoading || planExercises.length === 0}>\n              {isLoading ? \"Saving...\" : workoutPlan ? \"Update Plan\" : \"Create Plan\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":12521},"client/src/components/workout-subcategory-form-modal.tsx":{"content":"import { useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertWorkoutSubcategorySchema, type InsertWorkoutSubcategory, type WorkoutSubcategory } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\n\ninterface WorkoutSubcategoryFormModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  subcategory?: WorkoutSubcategory | null;\n  categoryId: string;\n  onSubmit: (data: InsertWorkoutSubcategory) => void;\n  isLoading: boolean;\n}\n\nexport function WorkoutSubcategoryFormModal({ isOpen, onClose, subcategory, categoryId, onSubmit, isLoading }: WorkoutSubcategoryFormModalProps) {\n  const form = useForm<InsertWorkoutSubcategory>({\n    resolver: zodResolver(insertWorkoutSubcategorySchema),\n    defaultValues: {\n      categoryId: categoryId,\n      name: \"\",\n      nameKurdish: \"\",\n      nameArabic: \"\",\n      iconUrl: \"\",\n      iconName: \"\",\n      order: 1,\n    },\n  });\n\n  // Reset form when subcategory changes or modal opens\n  useEffect(() => {\n    if (isOpen) {\n      if (subcategory) {\n        form.reset({\n          categoryId: subcategory.categoryId || categoryId,\n          name: subcategory.name || \"\",\n          nameKurdish: subcategory.nameKurdish || \"\",\n          nameArabic: subcategory.nameArabic || \"\",\n          iconUrl: subcategory.iconUrl || \"\",\n          iconName: subcategory.iconName || \"\",\n          order: subcategory.order || 1,\n        });\n      } else {\n        form.reset({\n          categoryId: categoryId,\n          name: \"\",\n          nameKurdish: \"\",\n          nameArabic: \"\",\n          iconUrl: \"\",\n          iconName: \"\",\n          order: 1,\n        });\n      }\n      // Clear form validation errors\n      form.clearErrors();\n    }\n  }, [subcategory, categoryId, form, isOpen]);\n\n  const handleSubmit = (data: InsertWorkoutSubcategory) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle>\n            {subcategory ? \"Edit Workout Subcategory\" : \"Create New Workout Subcategory\"}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subcategory Name (English)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Upper Back, Lower Back\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The English name of the workout subcategory\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameKurdish\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subcategory Name (Kurdish)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Kurdish name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Kurdish name of the workout subcategory (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"nameArabic\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Subcategory Name (Arabic)</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Arabic name\"\n                      className=\"w-full\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    The Arabic name of the workout subcategory (optional)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"iconUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Icon URL (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"https://example.com/icon.png\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      URL to an icon image\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"iconName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Icon Name (Optional)</FormLabel>\n                    <FormControl>\n                      <Input\n                        {...field}\n                        placeholder=\"e.g., target, muscle, weight\"\n                        className=\"w-full\"\n                      />\n                    </FormControl>\n                    <FormDescription>\n                      Name of the icon to display\n                    </FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"order\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Order</FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      type=\"number\"\n                      min=\"1\"\n                      placeholder=\"1\"\n                      className=\"w-full\"\n                      onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Display order for this subcategory (lower numbers appear first)\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex justify-end space-x-2\">\n              <Button type=\"button\" variant=\"outline\" onClick={onClose}>\n                Cancel\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                {isLoading ? \"Saving...\" : subcategory ? \"Update Subcategory\" : \"Create Subcategory\"}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7497},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getFirestore, connectFirestoreEmulator, collection, addDoc, getDocs, doc, updateDoc, deleteDoc, query, where, orderBy, limit } from \"firebase/firestore\";\nimport { getAnalytics } from \"firebase/analytics\";\nimport type { WorkoutCategory, WorkoutSubcategory, Exercise, InsertWorkoutCategory, InsertWorkoutSubcategory, InsertExercise } from '@shared/schema';\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB_liZT4SR7h47J9XBJYPiaYCrGNLinhuA\",\n  authDomain: \"calorie-316d8.firebaseapp.com\",\n  projectId: \"calorie-316d8\",\n  storageBucket: \"calorie-316d8.firebasestorage.app\",\n  messagingSenderId: \"817302259483\",\n  appId: \"1:817302259483:web:454240a8702611bb84f5be\",\n  measurementId: \"G-ZRP9DS8EQS\"\n};\n\n// Initialize Firebase\nexport const app = initializeApp(firebaseConfig);\n\n// Initialize Firestore\nexport const db = getFirestore(app);\n\n// Connect to Firestore emulator in development (disabled for production use)\n// if (import.meta.env.DEV) {\n//   try {\n//     connectFirestoreEmulator(db, 'localhost', 8080);\n//     console.log('Connected to Firestore emulator');\n//   } catch (error) {\n//     console.log('Firestore emulator connection failed:', error);\n//   }\n// }\n\n// Initialize Analytics (only in production)\nlet analytics;\nif (typeof window !== 'undefined' && firebaseConfig.measurementId) {\n  analytics = getAnalytics(app);\n}\n\nexport { analytics };\n\n// Sample data initialization function\nexport const initializeSampleWorkoutData = async () => {\n  try {\n    // Create sample categories\n    const chestCategory = await createWorkoutCategory({\n      name: \"Chest\",\n      nameKurdish: \"سینه\",\n      nameArabic: \"الصدر\",\n      iconUrl: \"\",\n      order: 1\n    });\n\n    const backCategory = await createWorkoutCategory({\n      name: \"Back\",\n      nameKurdish: \"پشت\",\n      nameArabic: \"الظهر\",\n      iconUrl: \"\",\n      order: 2\n    });\n\n    // Create sample subcategories\n    const upperChestSubcategory = await createWorkoutSubcategory(chestCategory, {\n      categoryId: chestCategory,\n      name: \"Upper Chest\",\n      nameKurdish: \"سینه سەروو\",\n      nameArabic: \"الصدر العلوي\",\n      iconUrl: \"\",\n      order: 1\n    });\n\n    const lowerChestSubcategory = await createWorkoutSubcategory(chestCategory, {\n      categoryId: chestCategory,\n      name: \"Lower Chest\",\n      nameKurdish: \"سینه خواروو\",\n      nameArabic: \"الصدر السفلي\",\n      iconUrl: \"\",\n      order: 2\n    });\n\n    // Create sample exercises\n    await createExercise(chestCategory, upperChestSubcategory, {\n      categoryId: chestCategory,\n      subcategoryId: upperChestSubcategory,\n      name: \"Incline Bench Press\",\n      nameKurdish: \"پەنج کردنی سینه سەروو\",\n      nameArabic: \"ضغط الصدر المائل\",\n      description: \"An upper chest exercise using an inclined bench\",\n      videoUrl: \"\",\n      thumbnailUrl: \"\",\n      muscleGroups: [\"chest\", \"triceps\", \"shoulders\"],\n      bodyTarget: \"Upper body\",\n      difficulty: \"intermediate\",\n      equipment: \"barbell\",\n      order: 1\n    });\n\n    await createExercise(chestCategory, lowerChestSubcategory, {\n      categoryId: chestCategory,\n      subcategoryId: lowerChestSubcategory,\n      name: \"Decline Bench Press\",\n      nameKurdish: \"پەنج کردنی سینه خواروو\",\n      nameArabic: \"ضغط الصدر المنحدر\",\n      description: \"A lower chest exercise using a declined bench\",\n      videoUrl: \"\",\n      thumbnailUrl: \"\",\n      muscleGroups: [\"chest\", \"triceps\"],\n      bodyTarget: \"Upper body\",\n      difficulty: \"intermediate\",\n      equipment: \"barbell\",\n      order: 1\n    });\n\n    console.log(\"Sample workout data initialized successfully\");\n  } catch (error) {\n    console.error(\"Error initializing sample data:\", error);\n  }\n};\n\n// Workout Categories\nexport const getWorkoutCategories = async (): Promise<WorkoutCategory[]> => {\n  try {\n    const querySnapshot = await getDocs(query(collection(db, 'workoutCategories'), orderBy('order')));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })) as WorkoutCategory[];\n  } catch (error) {\n    console.error('Error fetching workout categories:', error);\n    throw error;\n  }\n};\n\nexport const createWorkoutCategory = async (category: InsertWorkoutCategory): Promise<string> => {\n  try {\n    const docRef = await addDoc(collection(db, 'workoutCategories'), category);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating workout category:', error);\n    throw error;\n  }\n};\n\nexport const updateWorkoutCategory = async (id: string, category: Partial<WorkoutCategory>): Promise<void> => {\n  try {\n    await updateDoc(doc(db, 'workoutCategories', id), category);\n  } catch (error) {\n    console.error('Error updating workout category:', error);\n    throw error;\n  }\n};\n\nexport const deleteWorkoutCategory = async (id: string): Promise<void> => {\n  try {\n    await deleteDoc(doc(db, 'workoutCategories', id));\n  } catch (error) {\n    console.error('Error deleting workout category:', error);\n    throw error;\n  }\n};\n\n// Workout Subcategories\nexport const getWorkoutSubcategories = async (categoryId: string): Promise<WorkoutSubcategory[]> => {\n  try {\n    const querySnapshot = await getDocs(query(collection(db, 'workoutCategories', categoryId, 'subcategories'), orderBy('order')));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })) as WorkoutSubcategory[];\n  } catch (error) {\n    console.error('Error fetching workout subcategories:', error);\n    throw error;\n  }\n};\n\nexport const createWorkoutSubcategory = async (categoryId: string, subcategory: InsertWorkoutSubcategory): Promise<string> => {\n  try {\n    const docRef = await addDoc(collection(db, 'workoutCategories', categoryId, 'subcategories'), subcategory);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating workout subcategory:', error);\n    throw error;\n  }\n};\n\nexport const updateWorkoutSubcategory = async (categoryId: string, id: string, subcategory: Partial<WorkoutSubcategory>): Promise<void> => {\n  try {\n    await updateDoc(doc(db, 'workoutCategories', categoryId, 'subcategories', id), subcategory);\n  } catch (error) {\n    console.error('Error updating workout subcategory:', error);\n    throw error;\n  }\n};\n\nexport const deleteWorkoutSubcategory = async (categoryId: string, id: string): Promise<void> => {\n  try {\n    await deleteDoc(doc(db, 'workoutCategories', categoryId, 'subcategories', id));\n  } catch (error) {\n    console.error('Error deleting workout subcategory:', error);\n    throw error;\n  }\n};\n\n// Exercises\nexport const getExercises = async (categoryId: string, subcategoryId?: string): Promise<Exercise[]> => {\n  try {\n    const exercisesRef = subcategoryId ? \n      collection(db, 'workoutCategories', categoryId, 'subcategories', subcategoryId, 'exercises') :\n      collection(db, 'workoutCategories', categoryId, 'exercises');\n    \n    // Add limit to prevent loading too many exercises at once\n    const querySnapshot = await getDocs(query(exercisesRef, orderBy('order'), limit(20)));\n    return querySnapshot.docs.map(doc => ({\n      id: doc.id,\n      ...doc.data()\n    })) as Exercise[];\n  } catch (error) {\n    console.error('Error fetching exercises:', error);\n    throw error;\n  }\n};\n\nexport const createExercise = async (categoryId: string, subcategoryId: string | undefined, exercise: InsertExercise): Promise<string> => {\n  try {\n    const exercisesRef = subcategoryId ? \n      collection(db, 'workoutCategories', categoryId, 'subcategories', subcategoryId, 'exercises') :\n      collection(db, 'workoutCategories', categoryId, 'exercises');\n    \n    const docRef = await addDoc(exercisesRef, exercise);\n    return docRef.id;\n  } catch (error) {\n    console.error('Error creating exercise:', error);\n    throw error;\n  }\n};\n\nexport const updateExercise = async (categoryId: string, subcategoryId: string | undefined, id: string, exercise: Partial<Exercise>): Promise<void> => {\n  try {\n    const exerciseRef = subcategoryId ? \n      doc(db, 'workoutCategories', categoryId, 'subcategories', subcategoryId, 'exercises', id) :\n      doc(db, 'workoutCategories', categoryId, 'exercises', id);\n    \n    await updateDoc(exerciseRef, exercise);\n  } catch (error) {\n    console.error('Error updating exercise:', error);\n    throw error;\n  }\n};\n\nexport const deleteExercise = async (categoryId: string, subcategoryId: string | undefined, id: string): Promise<void> => {\n  try {\n    const exerciseRef = subcategoryId ? \n      doc(db, 'workoutCategories', categoryId, 'subcategories', subcategoryId, 'exercises', id) :\n      doc(db, 'workoutCategories', categoryId, 'exercises', id);\n    \n    await deleteDoc(exerciseRef);\n  } catch (error) {\n    console.error('Error deleting exercise:', error);\n    throw error;\n  }\n};\n","size_bytes":8860},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/foods-manager.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  collection, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc, \n  orderBy, \n  query as firestoreQuery,\n  where,\n  onSnapshot,\n  limit\n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Food, InsertFood, categoryConfig } from \"@shared/schema\";\nimport { FoodsTable } from \"@/components/foods-table\";\nimport { FoodFormModal } from \"@/components/food-form-modal\";\nimport { DeleteConfirmationModal } from \"@/components/delete-confirmation-modal\";\nimport { BulkActionsBar } from \"@/components/bulk-actions-bar\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Utensils, Plus, Search, Filter, Download, CheckCircle, ChefHat, Dumbbell, Crown, Database } from \"lucide-react\";\nimport { useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { LogoutButton } from \"@/components/logout-button\";\n\nexport default function FoodsManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  // State management\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingFood, setEditingFood] = useState<Food | null>(null);\n  const [deletingFood, setDeletingFood] = useState<Food | null>(null);\n  const [selectedFoods, setSelectedFoods] = useState<Set<string>>(new Set());\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(10);\n  const [sortBy, setSortBy] = useState<keyof Food>(\"name\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"asc\");\n\n  const [allFoodsLoaded, setAllFoodsLoaded] = useState(false); // Track if all foods are loaded\n  const [cacheExpired, setCacheExpired] = useState(false); // Track if cache has expired\n\n  // Check cache expiration (30 days)\n  useEffect(() => {\n    const lastCacheTime = localStorage.getItem(\"foodsCacheTime\");\n    const now = Date.now();\n    const thirtyDaysMs = 30 * 24 * 60 * 60 * 1000; // 30 days in milliseconds\n    \n    if (!lastCacheTime || (now - parseInt(lastCacheTime)) > thirtyDaysMs) {\n      setCacheExpired(true);\n      localStorage.setItem(\"foodsCacheTime\", now.toString());\n    }\n  }, []);\n\n  // Get foods from cache (populated by real-time listener)\n  const { data: foods = [] } = useQuery<Food[]>({\n    queryKey: [\"/api/foods\"],\n    queryFn: () => Promise.resolve([]), // Never called - data comes from onSnapshot\n    staleTime: 30 * 24 * 60 * 60 * 1000, // 30 days cache\n    gcTime: 30 * 24 * 60 * 60 * 1000, // 30 days garbage collection\n  });\n\n  // Real-time listener with loading state\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const foodsCollection = collection(db, \"foods\");\n    \n    // Always load ALL foods - no Firebase search, only client-side filtering\n    const q = firestoreQuery(foodsCollection, orderBy(\"name\"));\n    \n    const unsubscribe = onSnapshot(q, \n      (snapshot) => {\n        const updatedFoods = snapshot.docs.map(doc => {\n          const data = doc.data();\n          console.log('Raw Firebase data:', data); // Debug log\n          \n          // Ensure proper data structure\n          const food = {\n            id: doc.id,\n            name: data.name || '',\n            kurdishName: data.kurdishName,\n            arabicName: data.arabicName,\n            baseName: data.baseName || '',\n            brand: data.brand,\n            category: data.category,\n            foodType: data.foodType,\n            availableUnits: data.availableUnits,\n            // Ensure nutritionPer100 is properly structured\n            nutritionPer100: data.nutritionPer100 ? {\n              calories: Number(data.nutritionPer100.calories) || 0,\n              protein: data.nutritionPer100.protein ? Number(data.nutritionPer100.protein) : undefined,\n              carbs: data.nutritionPer100.carbs ? Number(data.nutritionPer100.carbs) : undefined,\n              fat: data.nutritionPer100.fat ? Number(data.nutritionPer100.fat) : undefined,\n              fiber: data.nutritionPer100.fiber ? Number(data.nutritionPer100.fiber) : undefined,\n              sugar: data.nutritionPer100.sugar ? Number(data.nutritionPer100.sugar) : undefined,\n              sodium: data.nutritionPer100.sodium ? Number(data.nutritionPer100.sodium) : undefined,\n              calcium: data.nutritionPer100.calcium ? Number(data.nutritionPer100.calcium) : undefined,\n              potassium: data.nutritionPer100.potassium ? Number(data.nutritionPer100.potassium) : undefined,\n              vitaminB12: data.nutritionPer100.vitaminB12 ? Number(data.nutritionPer100.vitaminB12) : undefined,\n              vitaminA: data.nutritionPer100.vitaminA ? Number(data.nutritionPer100.vitaminA) : undefined,\n              vitaminE: data.nutritionPer100.vitaminE ? Number(data.nutritionPer100.vitaminE) : undefined,\n              vitaminD: data.nutritionPer100.vitaminD ? Number(data.nutritionPer100.vitaminD) : undefined,\n              vitaminC: data.nutritionPer100.vitaminC ? Number(data.nutritionPer100.vitaminC) : undefined,\n              iron: data.nutritionPer100.iron ? Number(data.nutritionPer100.iron) : undefined,\n              magnesium: data.nutritionPer100.magnesium ? Number(data.nutritionPer100.magnesium) : undefined,\n            } : {\n              calories: 0\n            },\n            customConversions: data.customConversions,\n            vegetarian: data.vegetarian,\n            vegan: data.vegan,\n            glutenFree: data.glutenFree,\n            dairyFree: data.dairyFree,\n            mealPlanner: data.mealPlanner,\n            allowDuplication: data.allowDuplication,\n            lowCalorie: data.lowCalorie,\n            calorieAdjustment: data.calorieAdjustment,\n            minPortion: data.minPortion,\n            maxPortion: data.maxPortion,\n            mealTiming: data.mealTiming,\n            createdAt: data.createdAt?.toDate() || new Date(),\n            updatedAt: data.updatedAt?.toDate() || new Date(),\n          } as Food;\n          \n          console.log('Processed food:', food); // Debug log\n          return food;\n        });\n        \n        // All foods are always loaded now\n        setAllFoodsLoaded(true);\n        \n        queryClient.setQueryData([\"/api/foods\"], updatedFoods);\n        setIsLoading(false);\n        setError(null);\n      },\n      (err) => {\n        setError(err as Error);\n        setIsLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [queryClient]);\n\n  // Add food mutation\n  const addFoodMutation = useMutation({\n    mutationFn: async (newFood: InsertFood) => {\n      const foodsCollection = collection(db, \"foods\");\n      const now = new Date();\n      await addDoc(foodsCollection, {\n        ...newFood,\n        createdAt: now,\n        updatedAt: now,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Food item added successfully\",\n      });\n      setIsAddModalOpen(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/foods\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to add food item: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update food mutation\n  const updateFoodMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertFood> }) => {\n      const foodDoc = doc(db, \"foods\", id);\n      await updateDoc(foodDoc, {\n        ...data,\n        updatedAt: new Date(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Food item updated successfully\",\n      });\n      setEditingFood(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/foods\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to update food item: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete food mutation\n  const deleteFoodMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const foodDoc = doc(db, \"foods\", id);\n      await deleteDoc(foodDoc);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Food item deleted successfully\",\n      });\n      setDeletingFood(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/foods\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete food item: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk delete mutation\n  const bulkDeleteMutation = useMutation({\n    mutationFn: async (ids: string[]) => {\n      await Promise.all(\n        ids.map(id => deleteDoc(doc(db, \"foods\", id)))\n      );\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `${selectedFoods.size} food items deleted successfully`,\n      });\n      setSelectedFoods(new Set());\n      queryClient.invalidateQueries({ queryKey: [\"/api/foods\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete food items: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter and sort foods\n  const filteredAndSortedFoods = useMemo(() => {\n    let filtered = foods.filter(food => {\n      const matchesSearch = food.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        food.kurdishName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        food.arabicName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        food.brand?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        food.baseName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        (food.mealPlanner && searchTerm.toLowerCase().includes('meal')) ||\n        false;\n      \n      const matchesCategory = categoryFilter === \"all\" || food.category === categoryFilter;\n      \n      return matchesSearch && matchesCategory;\n    });\n\n    filtered.sort((a, b) => {\n      const aValue = a[sortBy] || \"\";\n      const bValue = b[sortBy] || \"\";\n      \n      if (typeof aValue === \"string\" && typeof bValue === \"string\") {\n        return sortOrder === \"asc\" \n          ? aValue.localeCompare(bValue)\n          : bValue.localeCompare(aValue);\n      }\n      \n      if (typeof aValue === \"number\" && typeof bValue === \"number\") {\n        return sortOrder === \"asc\" ? aValue - bValue : bValue - aValue;\n      }\n      \n      return 0;\n    });\n\n    return filtered;\n  }, [foods, searchTerm, categoryFilter, sortBy, sortOrder]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredAndSortedFoods.length / pageSize);\n  const paginatedFoods = filteredAndSortedFoods.slice(\n    (currentPage - 1) * pageSize,\n    currentPage * pageSize\n  );\n\n  const handleSort = (field: keyof Food) => {\n    if (sortBy === field) {\n      setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n    } else {\n      setSortBy(field);\n      setSortOrder(\"asc\");\n    }\n  };\n\n  const handleExport = () => {\n    const dataToExport = selectedFoods.size > 0 \n      ? foods.filter(food => selectedFoods.has(food.id))\n      : filteredAndSortedFoods;\n    \n    const csv = [\n      \"Name (English),Kurdish Name,Arabic Name,Brand,Category,Food Type,Servings,Calories,Protein,Carbs,Fat,Fiber,Sugar,Sodium\",\n      ...dataToExport.map(food => {\n        const servingsText = food.availableUnits?.join(', ') || '';\n        const nutrition = food.nutritionPer100 || {\n          calories: (food as any).calories || 0,\n          protein: (food as any).protein || 0,\n          carbs: (food as any).carbs || 0,\n          fat: (food as any).fat || 0,\n          fiber: (food as any).fiber || 0,\n          sugar: (food as any).sugar || 0,\n          sodium: (food as any).sodium || 0\n        };\n        return `\"${food.name}\",\"${food.kurdishName || \"\"}\",\"${food.arabicName || \"\"}\",\"${food.brand || \"\"}\",\"${food.category}\",\"${food.foodType}\",\"${servingsText}\",${nutrition.calories},${nutrition.protein || 0},${nutrition.carbs || 0},${nutrition.fat || 0},${nutrition.fiber || 0},${nutrition.sugar || 0},${nutrition.sodium || 0}`;\n      })\n    ].join(\"\\n\");\n    \n    const blob = new Blob([csv], { type: \"text/csv\" });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement(\"a\");\n    a.href = url;\n    a.download = \"foods-export.csv\";\n    a.click();\n    URL.revokeObjectURL(url);\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-xl mb-2\">Failed to connect to Firebase</div>\n          <div className=\"text-gray-600\">{error.message}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-50\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Utensils className=\"text-primary text-2xl\" />\n            <h1 className=\"text-xl font-medium text-gray-900\">Foods Database Manager</h1>\n            <nav className=\"flex items-center space-x-1 ml-8\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 bg-blue-50\">\n                  <Utensils className=\"h-4 w-4 mr-1\" />\n                  Foods\n                </Button>\n              </Link>\n              <Link href=\"/meals\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <ChefHat className=\"h-4 w-4 mr-1\" />\n                  Meals\n                </Button>\n              </Link>\n              <Link href=\"/workout-plans\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Dumbbell className=\"h-4 w-4 mr-1\" />\n                  Workouts\n                </Button>\n              </Link>\n              <Link href=\"/revenuecat-users\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Crown className=\"h-4 w-4 mr-1\" />\n                  Users\n                </Button>\n              </Link>\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">Connected to Firebase</span>\n            </div>\n            <LogoutButton />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"pt-20 flex h-screen\">\n        {/* Sidebar */}\n        <aside className=\"w-64 bg-white shadow-sm border-r border-gray-200 flex-shrink-0\">\n          <nav className=\"p-4 space-y-2\">\n            <div className=\"flex items-center space-x-3 px-3 py-2 bg-blue-50 text-primary rounded-lg font-medium\">\n              <span className=\"w-5\">📊</span>\n              <span>Foods Database</span>\n            </div>\n          </nav>\n\n          <div className=\"p-4 border-t border-gray-200 mt-auto\">\n            <div className=\"bg-gray-50 rounded-lg p-3\">\n              <div className=\"text-sm font-medium text-gray-900\">\n                {filteredAndSortedFoods.length} Food Items {allFoodsLoaded ? '(All)' : '(Limited)'}\n              </div>\n              <div className=\"text-xs text-gray-500 mt-1\">\n                <div className=\"flex items-center space-x-1\">\n                  <CheckCircle className=\"h-3 w-3 text-green-500\" />\n                  <span>Synced</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-hidden\">\n          <div className=\"h-full flex flex-col\">\n            {/* Toolbar */}\n            <div className=\"bg-white border-b border-gray-200 px-6 py-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <h2 className=\"text-lg font-medium text-gray-900\">Foods Database</h2>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium\">\n                      <CheckCircle className=\"h-3 w-3 inline mr-1\" />\n                      Synced\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-3\">\n                  {cacheExpired && (\n                    <div className=\"flex items-center space-x-2 px-3 py-2 bg-orange-50 text-orange-700 rounded-lg text-sm\">\n                      <Database className=\"h-4 w-4\" />\n                      <span>Cache refreshed (30-day cycle)</span>\n                    </div>\n                  )}\n                  {allFoodsLoaded && (\n                    <div className=\"flex items-center space-x-2 px-3 py-2 bg-green-50 text-green-700 rounded-lg text-sm\">\n                      <CheckCircle className=\"h-4 w-4\" />\n                      <span>All {foods.length} foods loaded</span>\n                    </div>\n                  )}\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      // Add a sample rice item to demonstrate multiple servings\n                      addFoodMutation.mutate({\n                        name: \"White Rice\",\n                        baseName: \"rice\",\n                        kurdishName: \"برنج سپی\",\n                        arabicName: \"أرز أبيض\",\n                        brand: \"Demo\",\n                        category: \"grains\",\n                        foodType: \"solid\",\n                        availableUnits: [\"cup\", \"g\", \"plate\"],\n                        nutritionPer100: {\n                          calories: 205,\n                          protein: 4.3,\n                          carbs: 45,\n                          fat: 0.4,\n                          fiber: 0.6,\n                        },\n\n                      });\n                    }}\n                    disabled={addFoodMutation.isPending}\n                  >\n                    {addFoodMutation.isPending ? <LoadingSpinner size=\"sm\" className=\"mr-2\" /> : null}\n                    Add Sample Rice\n                  </Button>\n                  <Button \n                    onClick={() => setIsAddModalOpen(true)}\n                    className=\"bg-primary hover:bg-blue-700\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add New Food\n                  </Button>\n                </div>\n              </div>\n\n              {/* Search and Filters */}\n              <div className=\"mt-4 flex items-center space-x-4\">\n                <div className=\"flex-1 relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search foods... (Firebase search after 3+ characters)\"\n                    value={searchTerm}\n                    onChange={(e) => {\n                      setSearchTerm(e.target.value);\n                      // Trigger Firebase search for 3+ characters\n                      if (e.target.value.length >= 3) {\n                        setHasSearched(true);\n                      } else if (e.target.value.length === 0) {\n                        setHasSearched(false);\n                      }\n                    }}\n                    className=\"pl-10\"\n                  />\n                </div>\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                  <SelectTrigger className=\"w-[180px]\">\n                    <SelectValue placeholder=\"All Categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Categories</SelectItem>\n                    {Object.entries(categoryConfig).map(([value, config]) => (\n                      <SelectItem key={value} value={value}>\n                        {config.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <Button variant=\"outline\" onClick={handleExport}>\n                  <Download className=\"h-4 w-4 mr-2\" />\n                  Export\n                </Button>\n              </div>\n            </div>\n\n            {/* Loading State */}\n            {isLoading ? (\n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <LoadingSpinner size=\"lg\" className=\"mx-auto mb-4\" />\n                  <div className=\"text-gray-600 font-medium\">Loading foods from Firebase...</div>\n                </div>\n              </div>\n            ) : (\n              <>\n                {/* Foods Table */}\n\n                {/* Search Results Info */}\n                {searchTerm && hasSearched && (\n                  <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mb-4\">\n                    <div className=\"text-sm text-blue-800\">\n                      Firebase search results for \"{searchTerm}\" - showing up to 50 matches\n                    </div>\n                  </div>\n                )}\n                {searchTerm && !hasSearched && searchTerm.length > 0 && searchTerm.length < 3 && (\n                  <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3 mb-4\">\n                    <div className=\"text-sm text-yellow-800\">\n                      Client-side search active for \"{searchTerm}\" - type 3+ characters for Firebase search\n                    </div>\n                  </div>\n                )}\n\n                <FoodsTable\n                  foods={paginatedFoods}\n                  selectedFoods={selectedFoods}\n                  onSelectionChange={setSelectedFoods}\n                  onEdit={setEditingFood}\n                  onDelete={setDeletingFood}\n                  onSort={handleSort}\n                  sortBy={sortBy}\n                  sortOrder={sortOrder}\n                />\n\n                {/* Pagination */}\n                <div className=\"bg-white px-6 py-3 border-t border-gray-200 flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm text-gray-700\">\n                      Showing <span className=\"font-medium\">{Math.min((currentPage - 1) * pageSize + 1, filteredAndSortedFoods.length)}</span> to{\" \"}\n                      <span className=\"font-medium\">{Math.min(currentPage * pageSize, filteredAndSortedFoods.length)}</span> of{\" \"}\n                      <span className=\"font-medium\">{filteredAndSortedFoods.length}</span> results\n                    </span>\n                    <Select value={pageSize.toString()} onValueChange={(value) => setPageSize(Number(value))}>\n                      <SelectTrigger className=\"w-[120px]\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"10\">10 per page</SelectItem>\n                        <SelectItem value=\"25\">25 per page</SelectItem>\n                        <SelectItem value=\"50\">50 per page</SelectItem>\n                        <SelectItem value=\"100\">100 per page</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                      disabled={currentPage === 1}\n                    >\n                      Previous\n                    </Button>\n                    <span className=\"text-sm text-gray-700\">\n                      Page {currentPage} of {totalPages}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                      disabled={currentPage === totalPages}\n                    >\n                      Next\n                    </Button>\n                  </div>\n                </div>\n              </>\n            )}\n          </div>\n        </main>\n      </div>\n\n      {/* Modals */}\n      <FoodFormModal\n        isOpen={isAddModalOpen || !!editingFood}\n        onClose={() => {\n          setIsAddModalOpen(false);\n          setEditingFood(null);\n        }}\n        food={editingFood}\n        onSubmit={(data) => {\n          if (editingFood) {\n            updateFoodMutation.mutate({ id: editingFood.id, data });\n          } else {\n            addFoodMutation.mutate(data);\n          }\n        }}\n        isLoading={addFoodMutation.isPending || updateFoodMutation.isPending}\n      />\n\n      <DeleteConfirmationModal\n        isOpen={!!deletingFood}\n        onClose={() => setDeletingFood(null)}\n        foodName={deletingFood?.name || \"\"}\n        onConfirm={() => {\n          if (deletingFood) {\n            deleteFoodMutation.mutate(deletingFood.id);\n          }\n        }}\n        isLoading={deleteFoodMutation.isPending}\n      />\n\n      <BulkActionsBar\n        selectedCount={selectedFoods.size}\n        onClearSelection={() => setSelectedFoods(new Set())}\n        onBulkDelete={() => bulkDeleteMutation.mutate(Array.from(selectedFoods))}\n        onBulkExport={handleExport}\n        isVisible={selectedFoods.size > 0}\n        isLoading={bulkDeleteMutation.isPending}\n      />\n    </div>\n  );\n}\n","size_bytes":26073},"client/src/pages/meals-manager.tsx":{"content":"import { useState, useMemo, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { \n  collection, \n  getDocs, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc, \n  orderBy, \n  query as firestoreQuery,\n  onSnapshot,\n  limit\n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Meal, InsertMeal, Food } from \"@shared/schema\";\nimport { LoadingSpinner } from \"@/components/ui/loading-spinner\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ChefHat, Plus, Search, Clock, Users, Star, Edit, Trash2, Utensils, Dumbbell, Crown } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { MealFormModal } from \"@/components/meal-form-modal\";\n\nexport default function MealsManager() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [mealTypeFilter, setMealTypeFilter] = useState(\"all\");\n  const [difficultyFilter, setDifficultyFilter] = useState(\"all\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageSize, setPageSize] = useState(12);\n  const [isAddModalOpen, setIsAddModalOpen] = useState(false);\n  const [editingMeal, setEditingMeal] = useState<Meal | null>(null);\n\n  // Get meals from cache (populated by real-time listener)\n  const { data: meals = [] } = useQuery<Meal[]>({\n    queryKey: [\"/api/meals\"],\n    queryFn: () => Promise.resolve([]), // Never called - data comes from onSnapshot\n    staleTime: Infinity, // Data is always fresh via real-time listener\n  });\n\n  // Shared foods cache - no duplicate fetching\n  const { data: foods = [] } = useQuery<Food[]>({\n    queryKey: [\"/api/foods\"],\n    queryFn: () => Promise.resolve([]), // Never called - data comes from Foods Manager's onSnapshot\n    staleTime: Infinity, // Data is always fresh via real-time listener\n  });\n\n  // Real-time listener with loading state for meals\n  const [mealsLoading, setMealsLoading] = useState(true);\n  const [mealsError, setMealsError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    const mealsCollection = collection(db, \"meals\");\n    // Add limit to meals loading (30 meals initially)\n    const q = firestoreQuery(mealsCollection, orderBy(\"name\"), limit(30));\n    \n    const unsubscribe = onSnapshot(q, \n      (snapshot) => {\n        const updatedMeals = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n          createdAt: doc.data().createdAt?.toDate() || new Date(),\n          updatedAt: doc.data().updatedAt?.toDate() || new Date(),\n        })) as Meal[];\n        \n        queryClient.setQueryData([\"/api/meals\"], updatedMeals);\n        setMealsLoading(false);\n        setMealsError(null);\n      },\n      (err) => {\n        setMealsError(err as Error);\n        setMealsLoading(false);\n      }\n    );\n\n    return () => unsubscribe();\n  }, [queryClient]);\n\n  // Add sample meal mutation\n  const addSampleMealMutation = useMutation({\n    mutationFn: async () => {\n      const mealsCollection = collection(db, \"meals\");\n      const now = new Date();\n      const sampleMeal: InsertMeal = {\n        name: \"Protein Power Breakfast\",\n        mealArabicName: \"فطار البروتين القوي\",\n        mealKurdishName: \"نان ی پڕوتین\",\n        mealType: [\"breakfast\"],\n        foods: [\n          { foodId: \"sample_eggs\", basePortion: 120, role: \"protein_primary\" },\n          { foodId: \"sample_bread\", basePortion: 75, role: \"carb_primary\" },\n          { foodId: \"sample_tomatoes\", basePortion: 150, role: \"filler\" }\n        ],\n        baseCalories: 485,\n        baseProtein: 32.5,\n        baseCarbs: 45.2,\n        baseFat: 18.7,\n        minScale: 0.5,\n        maxScale: 2.5,\n        prepTime: 10,\n        difficulty: \"easy\",\n        cultural: [\"arabic\", \"kurdish\", \"western\"],\n        tags: [\"high_protein\", \"quick\"],\n        isActive: true\n      };\n      \n      await addDoc(mealsCollection, {\n        ...sampleMeal,\n        createdAt: now,\n        updatedAt: now,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Sample meal added successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to add sample meal: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add meal mutation\n  const addMealMutation = useMutation({\n    mutationFn: async (newMeal: InsertMeal) => {\n      const mealsCollection = collection(db, \"meals\");\n      const now = new Date();\n      await addDoc(mealsCollection, {\n        ...newMeal,\n        createdAt: now,\n        updatedAt: now,\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Meal added successfully\",\n      });\n      setIsAddModalOpen(false);\n      setEditingMeal(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to add meal: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update meal mutation\n  const updateMealMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertMeal> }) => {\n      const mealDoc = doc(db, \"meals\", id);\n      await updateDoc(mealDoc, {\n        ...data,\n        updatedAt: new Date(),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Meal updated successfully\",\n      });\n      setIsAddModalOpen(false);\n      setEditingMeal(null);\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to update meal: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete meal mutation\n  const deleteMealMutation = useMutation({\n    mutationFn: async (mealId: string) => {\n      await deleteDoc(doc(db, \"meals\", mealId));\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Meal deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/meals\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete meal: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter and sort meals\n  const filteredAndSortedMeals = useMemo(() => {\n    return meals.filter(meal => {\n      const matchesSearch = meal.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        meal.mealArabicName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        meal.mealKurdishName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        meal.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()));\n      \n      const matchesMealType = mealTypeFilter === \"all\" || \n        (Array.isArray(meal.mealType) ? meal.mealType.includes(mealTypeFilter as any) : meal.mealType === mealTypeFilter);\n      const matchesDifficulty = difficultyFilter === \"all\" || meal.difficulty === difficultyFilter;\n      \n      return matchesSearch && matchesMealType && matchesDifficulty && meal.isActive;\n    });\n  }, [meals, searchTerm, mealTypeFilter, difficultyFilter]);\n\n  // Pagination\n  const totalPages = Math.ceil(filteredAndSortedMeals.length / pageSize);\n  const paginatedMeals = filteredAndSortedMeals.slice(\n    (currentPage - 1) * pageSize,\n    currentPage * pageSize\n  );\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case \"easy\": return \"bg-green-100 text-green-800\";\n      case \"medium\": return \"bg-yellow-100 text-yellow-800\";\n      case \"hard\": return \"bg-red-100 text-red-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  const getMealTypeColor = (mealType: string) => {\n    switch (mealType) {\n      case \"breakfast\": return \"bg-orange-100 text-orange-800\";\n      case \"lunch\": return \"bg-blue-100 text-blue-800\";\n      case \"dinner\": return \"bg-purple-100 text-purple-800\";\n      case \"snack\": return \"bg-pink-100 text-pink-800\";\n      default: return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  if (mealsError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-red-500 text-xl mb-2\">Failed to connect to Firebase</div>\n          <div className=\"text-gray-600\">{mealsError.message}</div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-50\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <ChefHat className=\"text-primary text-2xl\" />\n            <h1 className=\"text-xl font-medium text-gray-900\">Meals Manager</h1>\n            <nav className=\"flex items-center space-x-1 ml-8\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Utensils className=\"h-4 w-4 mr-1\" />\n                  Foods\n                </Button>\n              </Link>\n              <Link href=\"/meals\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 bg-blue-50\">\n                  <ChefHat className=\"h-4 w-4 mr-1\" />\n                  Meals\n                </Button>\n              </Link>\n              <Link href=\"/workout-plans\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Dumbbell className=\"h-4 w-4 mr-1\" />\n                  Workouts\n                </Button>\n              </Link>\n              <Link href=\"/revenuecat-users\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Crown className=\"h-4 w-4 mr-1\" />\n                  Users\n                </Button>\n              </Link>\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">Connected to Firebase</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"pt-20 px-6\">\n        {/* Controls */}\n        <div className=\"mb-6 flex flex-wrap gap-4 items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search meals...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-64\"\n              />\n            </div>\n            \n            <Select value={mealTypeFilter} onValueChange={setMealTypeFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Meal Type\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Types</SelectItem>\n                <SelectItem value=\"breakfast\">Breakfast</SelectItem>\n                <SelectItem value=\"lunch\">Lunch</SelectItem>\n                <SelectItem value=\"dinner\">Dinner</SelectItem>\n                <SelectItem value=\"snack\">Snack</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={difficultyFilter} onValueChange={setDifficultyFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"Difficulty\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Levels</SelectItem>\n                <SelectItem value=\"easy\">Easy</SelectItem>\n                <SelectItem value=\"medium\">Medium</SelectItem>\n                <SelectItem value=\"hard\">Hard</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button\n              variant=\"outline\"\n              onClick={() => addSampleMealMutation.mutate()}\n              disabled={addSampleMealMutation.isPending}\n            >\n              {addSampleMealMutation.isPending ? <LoadingSpinner size=\"sm\" className=\"mr-2\" /> : null}\n              Add Sample Meal\n            </Button>\n            <Button \n              className=\"bg-primary hover:bg-blue-700\"\n              onClick={() => {\n                setEditingMeal(null);\n                setIsAddModalOpen(true);\n              }}\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add New Meal\n            </Button>\n          </div>\n        </div>\n\n        {/* Meals Grid */}\n        {mealsLoading ? (\n          <div className=\"flex items-center justify-center py-12\">\n            <LoadingSpinner size=\"lg\" />\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {paginatedMeals.map((meal) => (\n              <Card key={meal.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <CardTitle className=\"text-lg font-semibold text-gray-900 mb-1\">\n                        {meal.name}\n                      </CardTitle>\n                      {meal.mealArabicName && (\n                        <p className=\"text-sm text-gray-600 mb-1\">{meal.mealArabicName}</p>\n                      )}\n                      {meal.mealKurdishName && (\n                        <p className=\"text-sm text-gray-600\">{meal.mealKurdishName}</p>\n                      )}\n                    </div>\n                    <div className=\"flex space-x-1\">\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => {\n                          setEditingMeal(meal);\n                          setIsAddModalOpen(true);\n                        }}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                      <Button \n                        variant=\"ghost\" \n                        size=\"sm\"\n                        onClick={() => deleteMealMutation.mutate(meal.id)}\n                        disabled={deleteMealMutation.isPending}\n                      >\n                        <Trash2 className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center space-x-2 flex-wrap\">\n                      {(Array.isArray(meal.mealType) ? meal.mealType : [meal.mealType]).map((type, index) => (\n                        <Badge key={index} className={getMealTypeColor(type)}>\n                          {type}\n                        </Badge>\n                      ))}\n                      <Badge className={getDifficultyColor(meal.difficulty)}>\n                        {meal.difficulty}\n                      </Badge>\n                    </div>\n\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                      <div className=\"flex items-center space-x-1\">\n                        <Clock className=\"h-3 w-3 text-gray-500\" />\n                        <span>{meal.prepTime} min</span>\n                      </div>\n                      <div className=\"flex items-center space-x-1\">\n                        <Users className=\"h-3 w-3 text-gray-500\" />\n                        <span>{meal.foods.length} foods</span>\n                      </div>\n                    </div>\n\n                    <div className=\"text-sm text-gray-600\">\n                      <p><span className=\"font-medium\">Calories:</span> {meal.baseCalories}</p>\n                      <p><span className=\"font-medium\">Protein:</span> {meal.baseProtein}g</p>\n                    </div>\n\n                    <div className=\"flex flex-wrap gap-1\">\n                      {meal.tags.slice(0, 3).map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                      {meal.tags.length > 3 && (\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          +{meal.tags.length - 3} more\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-center space-x-2 mt-8\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </Button>\n            <span className=\"text-sm text-gray-600\">\n              Page {currentPage} of {totalPages}\n            </span>\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Add/Edit Meal Modal */}\n      <MealFormModal\n        isOpen={isAddModalOpen}\n        onClose={() => {\n          setIsAddModalOpen(false);\n          setEditingMeal(null);\n        }}\n        meal={editingMeal}\n        onSubmit={(data) => {\n          if (editingMeal) {\n            updateMealMutation.mutate({ id: editingMeal.id, data });\n          } else {\n            addMealMutation.mutate(data);\n          }\n        }}\n        isLoading={addMealMutation.isPending || updateMealMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":18662},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/workout-plans.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { collection, getDocs, addDoc, updateDoc, deleteDoc, doc, query as firestoreQuery, orderBy } from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, Search, Edit, Trash2, Dumbbell, Users, Clock, FolderOpen, Target, ArrowLeft, Play, Crown } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { WorkoutCategory, WorkoutSubcategory, Exercise, InsertWorkoutCategory, InsertWorkoutSubcategory, InsertExercise } from \"@shared/schema\";\nimport { WorkoutCategoryFormModal } from \"@/components/workout-category-form-modal\";\nimport { WorkoutSubcategoryFormModal } from \"@/components/workout-subcategory-form-modal\";\nimport { WorkoutExerciseFormModal } from \"@/components/workout-exercise-form-modal\";\nimport { \n  getWorkoutCategories, \n  getWorkoutSubcategories, \n  getExercises, \n  createWorkoutCategory, \n  createWorkoutSubcategory, \n  createExercise,\n  updateWorkoutCategory,\n  updateWorkoutSubcategory,\n  updateExercise,\n  deleteWorkoutCategory,\n  deleteWorkoutSubcategory,\n  deleteExercise,\n  initializeSampleWorkoutData\n} from \"@/lib/firebase\";\n\nexport default function WorkoutPlans() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [view, setView] = useState<\"categories\" | \"subcategories\" | \"exercises\">(\"categories\");\n  const [selectedCategoryId, setSelectedCategoryId] = useState<string>(\"\");\n  const [selectedSubcategoryId, setSelectedSubcategoryId] = useState<string>(\"\");\n  const [isCategoryFormOpen, setIsCategoryFormOpen] = useState(false);\n  const [isSubcategoryFormOpen, setIsSubcategoryFormOpen] = useState(false);\n  const [isExerciseFormOpen, setIsExerciseFormOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<WorkoutCategory | null>(null);\n  const [editingSubcategory, setEditingSubcategory] = useState<WorkoutSubcategory | null>(null);\n  const [editingExercise, setEditingExercise] = useState<Exercise | null>(null);\n  const pageSize = 12;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Cached workout categories (load once, cache forever)\n  const { data: categories = [], isLoading: categoriesLoading } = useQuery({\n    queryKey: [\"/api/workout-categories\"],\n    queryFn: () => getWorkoutCategories(),\n    staleTime: 24 * 60 * 60 * 1000, // Cache for 24 hours\n    gcTime: 24 * 60 * 60 * 1000, // Keep in memory for 24 hours\n  });\n\n  // Background prefetching for better UX - preload subcategories for all categories\n  useEffect(() => {\n    if (categories.length > 0) {\n      categories.forEach(category => {\n        queryClient.prefetchQuery({\n          queryKey: [\"/api/workout-subcategories\", category.id],\n          queryFn: () => getWorkoutSubcategories(category.id),\n          staleTime: 24 * 60 * 60 * 1000,\n        });\n      });\n    }\n  }, [categories, queryClient]);\n\n  // Add cache invalidation optimization for mutations\n  const invalidateWorkoutCache = () => {\n    queryClient.invalidateQueries({ queryKey: [\"/api/workout-categories\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/workout-subcategories\"] });\n    queryClient.invalidateQueries({ queryKey: [\"/api/exercises\"] });\n  };\n\n  // Cached subcategories for selected category\n  const { data: subcategories = [], isLoading: subcategoriesLoading } = useQuery({\n    queryKey: [\"/api/workout-subcategories\", selectedCategoryId],\n    queryFn: () => getWorkoutSubcategories(selectedCategoryId),\n    enabled: Boolean(selectedCategoryId),\n    staleTime: 24 * 60 * 60 * 1000, // Cache for 24 hours\n    gcTime: 24 * 60 * 60 * 1000, // Keep in memory for 24 hours\n  });\n\n  // Only fetch exercises when subcategory is explicitly selected (not just browsing categories)\n  const { data: exercises = [], isLoading: exercisesLoading } = useQuery({\n    queryKey: [\"/api/exercises\", selectedCategoryId, selectedSubcategoryId],\n    queryFn: () => getExercises(selectedCategoryId, selectedSubcategoryId),\n    enabled: Boolean(selectedCategoryId && selectedSubcategoryId && view === \"exercises\"),\n    staleTime: 10 * 60 * 1000, // Cache exercises for 10 minutes\n    gcTime: 30 * 60 * 1000, // Keep in memory for 30 minutes\n  });\n\n  // Create category mutation\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: InsertWorkoutCategory) => {\n      if (editingCategory) {\n        await updateWorkoutCategory(editingCategory.id, data);\n      } else {\n        await createWorkoutCategory(data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Workout category ${editingCategory ? 'updated' : 'created'} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-categories\"] });\n      setIsCategoryFormOpen(false);\n      setEditingCategory(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create category: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete category mutation\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (categoryId: string) => {\n      await deleteWorkoutCategory(categoryId);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Workout category deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-categories\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete category: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create/Update subcategory mutation\n  const createSubcategoryMutation = useMutation({\n    mutationFn: async (data: InsertWorkoutSubcategory) => {\n      if (editingSubcategory) {\n        await updateWorkoutSubcategory(selectedCategoryId, editingSubcategory.id, data);\n      } else {\n        await createWorkoutSubcategory(selectedCategoryId, data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Workout subcategory ${editingSubcategory ? 'updated' : 'created'} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-subcategories\", selectedCategoryId] });\n      setIsSubcategoryFormOpen(false);\n      setEditingSubcategory(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingSubcategory ? 'update' : 'create'} subcategory: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete subcategory mutation\n  const deleteSubcategoryMutation = useMutation({\n    mutationFn: async (subcategoryId: string) => {\n      await deleteWorkoutSubcategory(selectedCategoryId, subcategoryId);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Workout subcategory deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/workout-subcategories\", selectedCategoryId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete subcategory: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Create/Update exercise mutation\n  const createExerciseMutation = useMutation({\n    mutationFn: async (data: InsertExercise) => {\n      if (editingExercise) {\n        await updateExercise(selectedCategoryId, selectedSubcategoryId, editingExercise.id, data);\n      } else {\n        await createExercise(selectedCategoryId, selectedSubcategoryId, data);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Exercise ${editingExercise ? 'updated' : 'created'} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\", selectedCategoryId, selectedSubcategoryId] });\n      setIsExerciseFormOpen(false);\n      setEditingExercise(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to create exercise: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete exercise mutation\n  const deleteExerciseMutation = useMutation({\n    mutationFn: async (exerciseId: string) => {\n      await deleteExercise(selectedCategoryId, selectedSubcategoryId, exerciseId);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Exercise deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exercises\", selectedCategoryId, selectedSubcategoryId] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete exercise: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter categories\n  const filteredCategories = categories.filter(category =>\n    category.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Filter subcategories\n  const filteredSubcategories = subcategories.filter(subcategory =>\n    subcategory.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Filter exercises\n  const filteredExercises = exercises.filter(exercise =>\n    exercise.name.toLowerCase().includes(searchTerm.toLowerCase())\n  );\n\n  // Pagination\n  const totalPages = view === \"categories\" \n    ? Math.ceil(filteredCategories.length / pageSize)\n    : view === \"subcategories\"\n    ? Math.ceil(filteredSubcategories.length / pageSize)\n    : Math.ceil(filteredExercises.length / pageSize);\n  \n  const paginatedItems = view === \"categories\"\n    ? filteredCategories.slice((currentPage - 1) * pageSize, currentPage * pageSize)\n    : view === \"subcategories\"\n    ? filteredSubcategories.slice((currentPage - 1) * pageSize, currentPage * pageSize)\n    : filteredExercises.slice((currentPage - 1) * pageSize, currentPage * pageSize);\n\n  // Modal handlers\n  const handleCreateCategory = () => {\n    setEditingCategory(null);\n    setIsCategoryFormOpen(true);\n  };\n\n  const handleEditCategory = (category: WorkoutCategory) => {\n    setEditingCategory(category);\n    setIsCategoryFormOpen(true);\n  };\n\n  const handleCategoryFormSubmit = (data: InsertWorkoutCategory) => {\n    createCategoryMutation.mutate(data);\n  };\n\n  const handleCreateExercise = () => {\n    setEditingExercise(null);\n    setIsExerciseFormOpen(true);\n  };\n\n  const handleEditExercise = (exercise: Exercise) => {\n    setEditingExercise(exercise);\n    setIsExerciseFormOpen(true);\n  };\n\n  const handleCreateSubcategory = () => {\n    setEditingSubcategory(null);\n    setIsSubcategoryFormOpen(true);\n  };\n\n  const handleEditSubcategory = (subcategory: WorkoutSubcategory) => {\n    setEditingSubcategory(subcategory);\n    setIsSubcategoryFormOpen(true);\n  };\n\n  const handleSubcategoryFormSubmit = (data: InsertWorkoutSubcategory) => {\n    const subcategoryData = {\n      ...data,\n      categoryId: selectedCategoryId\n    };\n    createSubcategoryMutation.mutate(subcategoryData);\n  };\n\n  const handleExerciseFormSubmit = (data: InsertExercise) => {\n    const exerciseData = {\n      ...data,\n      categoryId: selectedCategoryId,\n      subcategoryId: selectedSubcategoryId\n    };\n    createExerciseMutation.mutate(exerciseData);\n  };\n\n  const handleViewCategory = (categoryId: string) => {\n    setSelectedCategoryId(categoryId);\n    setView(\"subcategories\");\n    setCurrentPage(1);\n    setSearchTerm(\"\");\n    // Pre-load subcategories when category is selected for better UX\n    queryClient.prefetchQuery({\n      queryKey: [\"/api/workout-subcategories\", categoryId],\n      queryFn: () => getWorkoutSubcategories(categoryId),\n      staleTime: 24 * 60 * 60 * 1000,\n    });\n  };\n\n  const handleViewSubcategory = (subcategoryId: string) => {\n    setSelectedSubcategoryId(subcategoryId);\n    setView(\"exercises\");\n    setCurrentPage(1);\n    setSearchTerm(\"\");\n    // Pre-load exercises when subcategory is selected for better UX\n    queryClient.prefetchQuery({\n      queryKey: [\"/api/exercises\", selectedCategoryId, subcategoryId],\n      queryFn: () => getExercises(selectedCategoryId, subcategoryId),\n      staleTime: 10 * 60 * 1000,\n    });\n  };\n\n  const handleBackToCategories = () => {\n    setView(\"categories\");\n    setSelectedCategoryId(\"\");\n    setSelectedSubcategoryId(\"\");\n    setCurrentPage(1);\n    setSearchTerm(\"\");\n  };\n\n  const handleBackToSubcategories = () => {\n    setView(\"subcategories\");\n    setSelectedSubcategoryId(\"\");\n    setCurrentPage(1);\n    setSearchTerm(\"\");\n  };\n\n  const selectedCategory = categories.find(c => c.id === selectedCategoryId);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 fixed top-0 left-0 right-0 z-50\">\n        <div className=\"px-6 py-4 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Dumbbell className=\"text-primary text-2xl\" />\n            <h1 className=\"text-xl font-medium text-gray-900\">Workout Manager</h1>\n            <nav className=\"flex items-center space-x-1 ml-8\">\n              <Link href=\"/\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Users className=\"h-4 w-4 mr-1\" />\n                  Foods\n                </Button>\n              </Link>\n              <Link href=\"/meals\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Clock className=\"h-4 w-4 mr-1\" />\n                  Meals\n                </Button>\n              </Link>\n              <Link href=\"/workout-plans\">\n                <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 bg-blue-50\">\n                  <Dumbbell className=\"h-4 w-4 mr-1\" />\n                  Workouts\n                </Button>\n              </Link>\n              <Link href=\"/revenuecat-users\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  <Crown className=\"h-4 w-4 mr-1\" />\n                  Users\n                </Button>\n              </Link>\n            </nav>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">Connected to Firebase</span>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"pt-20 px-6\">\n        {/* Breadcrumb and Back Button */}\n        {view === \"subcategories\" && (\n          <div className=\"mb-4 flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleBackToCategories}>\n              <ArrowLeft className=\"h-4 w-4 mr-1\" />\n              Back to Categories\n            </Button>\n            <span className=\"text-gray-400\">/</span>\n            <span className=\"text-gray-700\">{selectedCategory?.name}</span>\n          </div>\n        )}\n\n        {view === \"exercises\" && (\n          <div className=\"mb-4 flex items-center space-x-2\">\n            <Button variant=\"ghost\" size=\"sm\" onClick={handleBackToSubcategories}>\n              <ArrowLeft className=\"h-4 w-4 mr-1\" />\n              Back to Subcategories\n            </Button>\n            <span className=\"text-gray-400\">/</span>\n            <span className=\"text-gray-700\">{selectedCategory?.name}</span>\n            <span className=\"text-gray-400\">/</span>\n            <span className=\"text-gray-700\">{subcategories.find(s => s.id === selectedSubcategoryId)?.name}</span>\n          </div>\n        )}\n\n        {/* Controls */}\n        <div className=\"mb-6 flex flex-wrap gap-4 items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder={\n                  view === \"categories\" ? \"Search categories...\" : \n                  view === \"subcategories\" ? \"Search subcategories...\" :\n                  \"Search exercises...\"\n                }\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-64\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            <Button onClick={\n              view === \"categories\" ? handleCreateCategory : \n              view === \"subcategories\" ? handleCreateSubcategory :\n              handleCreateExercise\n            }>\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {view === \"categories\" ? \"Create Category\" : \n               view === \"subcategories\" ? \"Create Subcategory\" :\n               \"Create Exercise\"}\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Categories</p>\n                  <p className=\"text-2xl font-bold\">{categories.length}</p>\n                </div>\n                <FolderOpen className=\"h-8 w-8 text-blue-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Exercises</p>\n                  <p className=\"text-2xl font-bold\">\n                    {view === \"exercises\" ? exercises.length : categories.reduce((sum, cat) => sum + (cat.exerciseCount || 0), 0)}\n                  </p>\n                </div>\n                <Target className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {view === \"categories\" ? \"Showing\" : \n                     view === \"subcategories\" ? \"In Category\" : \n                     \"In Subcategory\"}\n                  </p>\n                  <p className=\"text-2xl font-bold\">\n                    {view === \"categories\" ? filteredCategories.length : \n                     view === \"subcategories\" ? filteredSubcategories.length :\n                     filteredExercises.length}\n                  </p>\n                </div>\n                <Play className=\"h-8 w-8 text-purple-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Content */}\n        {(view === \"categories\" && categoriesLoading) || \n         (view === \"subcategories\" && subcategoriesLoading) || \n         (view === \"exercises\" && exercisesLoading) ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-500\">Loading...</div>\n          </div>\n        ) : paginatedItems.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-500\">\n              {view === \"categories\" ? \"No categories found\" : \n               view === \"subcategories\" ? \"No subcategories found\" :\n               \"No exercises found\"}\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {view === \"categories\" ? (\n              // Categories view\n              (paginatedItems as WorkoutCategory[]).map((category) => (\n                <Card key={category.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-semibold text-gray-900 mb-1\">\n                          {category.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          Order: {category.order}\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleEditCategory(category)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteCategoryMutation.mutate(category.id)}\n                          disabled={deleteCategoryMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      {category.iconUrl && (\n                        <div className=\"text-sm text-gray-600\">\n                          <p><span className=\"font-medium\">Icon URL:</span> {category.iconUrl}</p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleViewCategory(category.id)}\n                        >\n                          <FolderOpen className=\"h-3 w-3 mr-1\" />\n                          View Subcategories\n                        </Button>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {category.exerciseCount || 0} exercises\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : view === \"subcategories\" ? (\n              // Subcategories view\n              (paginatedItems as WorkoutSubcategory[]).map((subcategory) => (\n                <Card key={subcategory.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-semibold text-gray-900 mb-1\">\n                          {subcategory.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          Order: {subcategory.order}\n                        </p>\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleEditSubcategory(subcategory)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteSubcategoryMutation.mutate(subcategory.id)}\n                          disabled={deleteSubcategoryMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      {subcategory.iconUrl && (\n                        <div className=\"text-sm text-gray-600\">\n                          <p><span className=\"font-medium\">Icon URL:</span> {subcategory.iconUrl}</p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex justify-between items-center\">\n                        <Button \n                          size=\"sm\" \n                          variant=\"outline\"\n                          onClick={() => handleViewSubcategory(subcategory.id)}\n                        >\n                          <FolderOpen className=\"h-3 w-3 mr-1\" />\n                          View Exercises\n                        </Button>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {subcategory.exerciseCount || 0} exercises\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            ) : (\n              // Exercises view\n              (paginatedItems as Exercise[]).map((exercise) => (\n                <Card key={exercise.id} className=\"hover:shadow-lg transition-shadow\">\n                  <CardHeader className=\"pb-3\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-lg font-semibold text-gray-900 mb-1\">\n                          {exercise.name}\n                        </CardTitle>\n                        <p className=\"text-sm text-gray-600\">\n                          {exercise.difficulty} • {exercise.equipment}\n                        </p>\n                        {exercise.bodyTarget && (\n                          <p className=\"text-xs text-gray-500\">\n                            Target: {exercise.bodyTarget}\n                          </p>\n                        )}\n                      </div>\n                      <div className=\"flex space-x-1\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleEditExercise(exercise)}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => deleteExerciseMutation.mutate(exercise.id)}\n                          disabled={deleteExerciseMutation.isPending}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"pt-0\">\n                    <div className=\"space-y-3\">\n                      {exercise.description && (\n                        <div className=\"text-sm text-gray-600\">\n                          <p>{exercise.description.substring(0, 100)}...</p>\n                        </div>\n                      )}\n                      \n                      <div className=\"flex flex-wrap gap-1\">\n                        {exercise.muscleGroups.map((muscle, index) => (\n                          <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                            {muscle}\n                          </Badge>\n                        ))}\n                      </div>\n\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"text-xs text-gray-500\">\n                          Order: {exercise.order}\n                        </div>\n                        {exercise.videoUrl && (\n                          <Button size=\"sm\" variant=\"outline\" className=\"text-xs\">\n                            <Play className=\"h-3 w-3 mr-1\" />\n                            Watch Video\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))\n            )}\n          </div>\n        )}\n\n        {/* Pagination */}\n        {totalPages > 1 && (\n          <div className=\"flex items-center justify-center space-x-2 mt-8\">\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n              disabled={currentPage === 1}\n            >\n              Previous\n            </Button>\n            <span className=\"text-sm text-gray-600\">\n              Page {currentPage} of {totalPages}\n            </span>\n            <Button\n              variant=\"outline\"\n              onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n              disabled={currentPage === totalPages}\n            >\n              Next\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {/* Category Form Modal */}\n      <WorkoutCategoryFormModal\n        isOpen={isCategoryFormOpen}\n        onClose={() => {\n          setIsCategoryFormOpen(false);\n          setEditingCategory(null);\n        }}\n        category={editingCategory}\n        onSubmit={handleCategoryFormSubmit}\n        isLoading={createCategoryMutation.isPending}\n      />\n\n      {/* Subcategory Form Modal */}\n      <WorkoutSubcategoryFormModal\n        isOpen={isSubcategoryFormOpen}\n        onClose={() => {\n          setIsSubcategoryFormOpen(false);\n          setEditingSubcategory(null);\n        }}\n        subcategory={editingSubcategory}\n        categoryId={selectedCategoryId}\n        onSubmit={handleSubcategoryFormSubmit}\n        isLoading={createSubcategoryMutation.isPending}\n      />\n\n      {/* Exercise Form Modal */}\n      <WorkoutExerciseFormModal\n        isOpen={isExerciseFormOpen}\n        onClose={() => {\n          setIsExerciseFormOpen(false);\n          setEditingExercise(null);\n        }}\n        exercise={editingExercise}\n        onSubmit={handleExerciseFormSubmit}\n        isLoading={createExerciseMutation.isPending}\n      />\n    </div>\n  );\n}","size_bytes":30365},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","size_bytes":1127},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex flex-col space-y-1.5 p-6\", className)} {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","size_bytes":1862},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}","size_bytes":3855},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/loading-spinner.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\ninterface LoadingSpinnerProps {\n  className?: string;\n  size?: \"sm\" | \"md\" | \"lg\";\n}\n\nexport function LoadingSpinner({ className, size = \"md\" }: LoadingSpinnerProps) {\n  const sizeClasses = {\n    sm: \"h-4 w-4\",\n    md: \"h-6 w-6\", \n    lg: \"h-8 w-8\"\n  };\n\n  return (\n    <div\n      className={cn(\n        \"animate-spin rounded-full border-2 border-gray-300 border-t-primary\",\n        sizeClasses[size],\n        className\n      )}\n    />\n  );\n}\n","size_bytes":478},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}","size_bytes":2764},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/logout-button.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { LogOut } from \"lucide-react\";\n\nexport function LogoutButton() {\n  const handleLogout = () => {\n    localStorage.removeItem(\"isAuthenticated\");\n    window.location.reload();\n  };\n\n  return (\n    <Button \n      variant=\"outline\" \n      size=\"sm\" \n      onClick={handleLogout}\n      className=\"flex items-center gap-2\"\n    >\n      <LogOut className=\"h-4 w-4\" />\n      Logout\n    </Button>\n  );\n}","size_bytes":450},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lock, User } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\ninterface LoginProps {\n  onLogin: () => void;\n}\n\nexport default function Login({ onLogin }: LoginProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const onSubmit = async (data: LoginForm) => {\n    setIsLoading(true);\n    \n    // Simple authentication check\n    if (data.username === \"admin\" && data.password === \"admin\") {\n      localStorage.setItem(\"isAuthenticated\", \"true\");\n      toast({\n        title: \"Login successful\",\n        description: \"Welcome to Foods Database Manager\",\n      });\n      onLogin();\n    } else {\n      toast({\n        title: \"Login failed\",\n        description: \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setIsLoading(false);\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"space-y-1\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-full\">\n              <Lock className=\"h-6 w-6 text-primary\" />\n            </div>\n          </div>\n          <CardTitle className=\"text-2xl text-center\">Foods Database Manager</CardTitle>\n          <CardDescription className=\"text-center\">\n            Enter your credentials to access the system\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <User className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          {...field}\n                          placeholder=\"Enter username\"\n                          className=\"pl-9\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <div className=\"relative\">\n                        <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                        <Input\n                          {...field}\n                          type=\"password\"\n                          placeholder=\"Enter password\"\n                          className=\"pl-9\"\n                          disabled={isLoading}\n                        />\n                      </div>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button type=\"submit\" className=\"w-full\" disabled={isLoading}>\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          </Form>\n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4389},"client/src/pages/revenuecat-users.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Users, Crown, Calendar, DollarSign, Settings, RefreshCw, Trash2, Eye, Gift, Plus } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { LogoutButton } from \"@/components/logout-button\";\n\ninterface RevenueCatSubscriber {\n  request_date: string;\n  request_date_ms: number;\n  subscriber: {\n    first_seen: string;\n    last_seen: string;\n    management_url: string;\n    non_subscriptions: Record<string, any>;\n    original_app_user_id: string;\n    original_application_version: string;\n    original_purchase_date: string;\n    other_purchases: Record<string, any>;\n    subscriptions: Record<string, {\n      auto_resume_date: string | null;\n      billing_issues_detected_at: string | null;\n      expires_date: string;\n      grace_period_expires_date: string | null;\n      is_sandbox: boolean;\n      original_purchase_date: string;\n      period_type: string;\n      purchase_date: string;\n      refunded_at: string | null;\n      store: string;\n      unsubscribe_detected_at: string | null;\n    }>;\n    entitlements: Record<string, {\n      expires_date: string;\n      grace_period_expires_date: string | null;\n      product_identifier: string;\n      purchase_date: string;\n    }>;\n  };\n}\n\ninterface UserAttribute {\n  value: string;\n  updated_at_ms: number;\n}\n\nexport default function RevenueCatUsers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedUser, setSelectedUser] = useState<RevenueCatSubscriber | null>(null);\n  const [isUserModalOpen, setIsUserModalOpen] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n  const [isConfigured, setIsConfigured] = useState(false);\n  const pageSize = 20;\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [location] = useLocation();\n\n  // Check if API key is configured\n  useEffect(() => {\n    const storedApiKey = localStorage.getItem(\"revenuecat_api_key\");\n    if (storedApiKey) {\n      setApiKey(storedApiKey);\n      setIsConfigured(true);\n    } else {\n      // Auto-configure if we have environment secret\n      setIsConfigured(true);\n    }\n  }, []);\n\n  // Save API key\n  const handleApiKeySubmit = () => {\n    if (apiKey.trim()) {\n      localStorage.setItem(\"revenuecat_api_key\", apiKey.trim());\n      setIsConfigured(true);\n      toast({\n        title: \"API Key Saved\",\n        description: \"RevenueCat API key has been configured successfully\",\n      });\n    }\n  };\n\n  // State for user testing\n  const [testUserId, setTestUserId] = useState(\"\");\n  const [testResult, setTestResult] = useState<any>(null);\n  \n  // State for granting entitlements\n  const [grantUserId, setGrantUserId] = useState(\"\");\n  const [grantEntitlementId, setGrantEntitlementId] = useState(\"\");\n  const [grantDuration, setGrantDuration] = useState(\"lifetime\");\n  const [isGrantModalOpen, setIsGrantModalOpen] = useState(false);\n  \n  // State for user ID management\n  const [userIdsInput, setUserIdsInput] = useState(\"\");\n  const [searchUserIds, setSearchUserIds] = useState<string[]>([]);\n\n  // Fetch all subscribers (this would need to be implemented with proper pagination)\n  const { data: subscribersData, isLoading, error, refetch } = useQuery({\n    queryKey: [\"/api/revenuecat/subscribers\", searchUserIds],\n    queryFn: async () => {\n      const response = await fetch('/api/revenuecat/subscribers', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          apiKey: apiKey || 'from_env',\n          userIds: searchUserIds\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch subscribers');\n      }\n      \n      return response.json();\n    },\n    enabled: isConfigured,\n    staleTime: 5 * 60 * 1000, // Cache for 5 minutes\n  });\n\n  const subscribers = subscribersData?.subscribers || [];\n\n  // Test subscriber mutation\n  const testSubscriberMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch('/api/revenuecat/test-subscriber', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ \n          apiKey: apiKey || 'from_env',\n          userId \n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Failed to test subscriber');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setTestResult(data);\n      toast({\n        title: \"Success\",\n        description: \"Successfully fetched subscriber data from RevenueCat\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to fetch subscriber: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Grant entitlement mutation\n  const grantEntitlementMutation = useMutation({\n    mutationFn: async (params: { userId: string; entitlementId: string; duration: string }) => {\n      const response = await fetch('/api/revenuecat/grant-entitlement', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          apiKey: apiKey || 'from_env',\n          userId: params.userId,\n          entitlementId: params.entitlementId,\n          duration: params.duration\n        })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || `Failed to grant entitlement: ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Entitlement Granted!\",\n        description: data.message,\n      });\n      setIsGrantModalOpen(false);\n      setGrantUserId(\"\");\n      setGrantEntitlementId(\"\");\n      setGrantDuration(\"lifetime\");\n      refetch(); // Refresh the subscriber list\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to Grant Entitlement\",\n        description: error.message || \"Please check your inputs and try again\",\n      });\n    }\n  });\n\n  const handleGrantEntitlement = () => {\n    if (!grantUserId.trim() || !grantEntitlementId.trim()) {\n      toast({\n        variant: \"destructive\",\n        title: \"Missing Information\",\n        description: \"Please provide both User ID and Entitlement ID\",\n      });\n      return;\n    }\n\n    grantEntitlementMutation.mutate({\n      userId: grantUserId.trim(),\n      entitlementId: grantEntitlementId.trim(),\n      duration: grantDuration\n    });\n  };\n\n  // Handle user IDs input\n  const handleUserIdsSubmit = () => {\n    const userIds = userIdsInput\n      .split(',')\n      .map(id => id.trim())\n      .filter(id => id.length > 0);\n    \n    if (userIds.length === 0) {\n      toast({\n        variant: \"destructive\",\n        title: \"No User IDs\",\n        description: \"Please enter at least one user ID\",\n      });\n      return;\n    }\n\n    setSearchUserIds(userIds);\n    toast({\n      title: \"Searching Users\",\n      description: `Searching for ${userIds.length} user(s)...`,\n    });\n  };\n\n  // Get subscriber details\n  const getSubscriberMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/revenuecat/subscriber/${encodeURIComponent(userId)}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ apiKey: apiKey || 'from_env' }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to fetch subscriber details');\n      }\n      \n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSelectedUser(data);\n      setIsUserModalOpen(true);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to fetch user details: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete subscriber\n  const deleteSubscriberMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/revenuecat/subscriber/${encodeURIComponent(userId)}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ apiKey }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to delete subscriber');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Subscriber deleted successfully\",\n      });\n      refetch();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to delete subscriber: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter subscribers - handle case where subscribers might not be an array\n  const subscribersArray = Array.isArray(subscribers) ? subscribers : [];\n  const filteredSubscribers = subscribersArray.filter((subscriber: RevenueCatSubscriber) => {\n    const matchesSearch = \n      subscriber.subscriber.original_app_user_id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      Object.keys(subscriber.subscriber.subscriptions).some(key => \n        key.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n\n    if (statusFilter === \"all\") return matchesSearch;\n    \n    const hasActiveSubscription = Object.values(subscriber.subscriber.subscriptions).some(\n      (sub: any) => new Date(sub.expires_date) > new Date()\n    );\n    \n    if (statusFilter === \"active\") return matchesSearch && hasActiveSubscription;\n    if (statusFilter === \"expired\") return matchesSearch && !hasActiveSubscription;\n    \n    return matchesSearch;\n  });\n\n  // Pagination\n  const totalPages = Math.ceil(filteredSubscribers.length / pageSize);\n  const paginatedSubscribers = filteredSubscribers.slice(\n    (currentPage - 1) * pageSize,\n    currentPage * pageSize\n  );\n\n  const getSubscriptionStatus = (subscriptions: Record<string, any>) => {\n    const hasActive = Object.values(subscriptions).some(\n      (sub: any) => new Date(sub.expires_date) > new Date()\n    );\n    return hasActive ? \"active\" : \"expired\";\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  const getSubscriptionCount = (subscriptions: Record<string, any>) => {\n    return Object.keys(subscriptions).length;\n  };\n\n  if (!isConfigured) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <div className=\"border-b\">\n          <div className=\"container mx-auto px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                <Users className=\"text-primary text-2xl\" />\n                <h1 className=\"text-xl font-medium text-gray-900\">RevenueCat Users</h1>\n              </div>\n              <LogoutButton />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"container mx-auto px-6 py-8 space-y-6\">\n          <Card className=\"max-w-2xl mx-auto\">\n            <CardHeader>\n              <CardTitle>RevenueCat Integration</CardTitle>\n              <CardDescription>\n                Test your RevenueCat API connection and view subscriber data\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium\">API Key (Optional)</label>\n                  <Input\n                    type=\"password\"\n                    placeholder=\"sk_xxx... (or leave empty to use environment secret)\"\n                    value={apiKey}\n                    onChange={(e) => setApiKey(e.target.value)}\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Leave empty to use the REVENUECAT_SECRET_API_KEY environment variable\n                  </p>\n                </div>\n                <Button onClick={handleApiKeySubmit} className=\"w-full\">\n                  Save Configuration\n                </Button>\n              </div>\n              \n              <div className=\"border-t pt-6\">\n                <h3 className=\"font-medium mb-4\">Test API Connection</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-800 mb-2\">How to Find Subscriber IDs:</h4>\n                    <ul className=\"text-sm text-blue-700 space-y-1\">\n                      <li>1. Go to your RevenueCat dashboard → \"Customers\" section</li>\n                      <li>2. Look for App User IDs like: user_123, john@email.com, or $RCAnonymousID:abc123</li>\n                      <li>3. Copy any App User ID and paste it below</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Input\n                      placeholder=\"Enter App User ID from RevenueCat dashboard (e.g., user_123 or john@email.com)\"\n                      value={testUserId}\n                      onChange={(e) => setTestUserId(e.target.value)}\n                    />\n                    <Button \n                      onClick={() => testSubscriberMutation.mutate(testUserId)}\n                      disabled={!testUserId || testSubscriberMutation.isPending}\n                    >\n                      {testSubscriberMutation.isPending ? \"Testing...\" : \"Test\"}\n                    </Button>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground\">\n                    <p>Need help? Go to <strong>RevenueCat Dashboard → Customers</strong> to find existing subscriber IDs</p>\n                  </div>\n                </div>\n                \n                {testResult && (\n                  <div className=\"mt-4 p-4 bg-green-50 border border-green-200 rounded-lg\">\n                    <h4 className=\"font-medium text-green-800 mb-2\">API Test Successful!</h4>\n                    <div className=\"text-sm text-green-700\">\n                      <p><strong>User ID:</strong> {testResult.subscriber?.original_app_user_id}</p>\n                      <p><strong>Subscriptions:</strong> {Object.keys(testResult.subscriber?.subscriptions || {}).length}</p>\n                      <p><strong>First Seen:</strong> {testResult.subscriber?.first_seen}</p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n\n          \n          <Card className=\"max-w-4xl mx-auto\">\n            <CardHeader>\n              <CardTitle>RevenueCat API Limitations</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-lg\">\n                  <h4 className=\"font-medium text-yellow-800 mb-2\">Important Notes:</h4>\n                  <ul className=\"text-sm text-yellow-700 space-y-1\">\n                    <li>• RevenueCat doesn't provide a \"list all subscribers\" endpoint</li>\n                    <li>• You need specific user IDs to fetch subscriber data</li>\n                    <li>• Use webhooks or maintain your own user database for full subscriber management</li>\n                    <li>• This interface is designed for testing and viewing individual subscriber details</li>\n                  </ul>\n                </div>\n                \n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <div className=\"p-4 border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Available Features:</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>✓ Test API connection</li>\n                      <li>✓ Fetch individual subscriber data</li>\n                      <li>✓ View subscription details</li>\n                      <li>✓ Check entitlements</li>\n                      <li>✓ Delete subscribers</li>\n                    </ul>\n                  </div>\n                  \n                  <div className=\"p-4 border rounded-lg\">\n                    <h4 className=\"font-medium mb-2\">Implementation Suggestions:</h4>\n                    <ul className=\"text-sm text-muted-foreground space-y-1\">\n                      <li>• Set up RevenueCat webhooks</li>\n                      <li>• Store user IDs in your database</li>\n                      <li>• Implement batch user management</li>\n                      <li>• Add revenue analytics</li>\n                      <li>• Create subscription reports</li>\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <div className=\"border-b\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Users className=\"text-primary text-2xl\" />\n              <h1 className=\"text-xl font-medium text-gray-900\">RevenueCat Users</h1>\n              <nav className=\"flex items-center space-x-1 ml-8\">\n                <Link href=\"/\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Foods\n                  </Button>\n                </Link>\n                <Link href=\"/meals\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Meals\n                  </Button>\n                </Link>\n                <Link href=\"/workout-plans\">\n                  <Button variant=\"ghost\" size=\"sm\">\n                    Workouts\n                  </Button>\n                </Link>\n                <Link href=\"/revenuecat-users\">\n                  <Button variant=\"ghost\" size=\"sm\" className=\"text-blue-600 bg-blue-50\">\n                    <Crown className=\"h-4 w-4 mr-1\" />\n                    Users\n                  </Button>\n                </Link>\n              </nav>\n            </div>\n            <LogoutButton />\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"container mx-auto px-6 py-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Subscribers</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{subscribersArray.length}</div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Active Subscriptions</CardTitle>\n              <Crown className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {subscribersArray.filter((s: RevenueCatSubscriber) => \n                  getSubscriptionStatus(s.subscriber.subscriptions) === \"active\"\n                ).length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Expired</CardTitle>\n              <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {subscribersArray.filter((s: RevenueCatSubscriber) => \n                  getSubscriptionStatus(s.subscriber.subscriptions) === \"expired\"\n                ).length}\n              </div>\n            </CardContent>\n          </Card>\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Revenue This Month</CardTitle>\n              <DollarSign className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">$-</div>\n              <p className=\"text-xs text-muted-foreground\">\n                Requires transaction API\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* User Search Section */}\n        <Card className=\"max-w-2xl mx-auto mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Search className=\"h-5 w-5 text-blue-600\" />\n              Search for Subscribers\n            </CardTitle>\n            <CardDescription>\n              RevenueCat doesn't provide a \"list all subscribers\" endpoint. Enter specific user IDs to fetch their data.\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <label className=\"text-sm font-medium\">User IDs (comma-separated)</label>\n                <Input\n                  placeholder=\"user1, user2, UySqm239mIQUFWBS9AEqD3dkLra2\"\n                  value={userIdsInput}\n                  onChange={(e) => setUserIdsInput(e.target.value)}\n                />\n                <p className=\"text-xs text-muted-foreground\">\n                  Enter one or more user IDs separated by commas. You can find user IDs in your RevenueCat dashboard or app analytics.\n                </p>\n              </div>\n              \n              <Button \n                onClick={handleUserIdsSubmit}\n                className=\"w-full\"\n                disabled={!userIdsInput.trim()}\n              >\n                <Search className=\"h-4 w-4 mr-2\" />\n                Search Subscribers\n              </Button>\n              \n              {searchUserIds.length > 0 && (\n                <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n                  <p className=\"text-sm text-blue-800\">\n                    <strong>Searching for:</strong> {searchUserIds.join(\", \")}\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Grant Entitlement Section */}\n        <Card className=\"max-w-2xl mx-auto mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Gift className=\"h-5 w-5 text-green-600\" />\n              Grant Free Entitlements\n            </CardTitle>\n            <CardDescription>\n              Give free access to friends, family, or beta testers using RevenueCat's API\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"p-4 bg-green-50 border border-green-200 rounded-lg\">\n                <h4 className=\"font-medium text-green-800 mb-2\">Perfect for:</h4>\n                <ul className=\"text-sm text-green-700 space-y-1\">\n                  <li>• Friends and family members</li>\n                  <li>• Beta testers and reviewers</li>\n                  <li>• Promotional giveaways</li>\n                  <li>• Customer support cases</li>\n                </ul>\n              </div>\n              \n              <Button \n                onClick={() => setIsGrantModalOpen(true)}\n                className=\"w-full bg-green-600 hover:bg-green-700\"\n                size=\"lg\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Grant Entitlement to User\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filters */}\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search users...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 w-80\"\n              />\n            </div>\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-[180px]\">\n                <SelectValue placeholder=\"Filter by status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Users</SelectItem>\n                <SelectItem value=\"active\">Active Subscriptions</SelectItem>\n                <SelectItem value=\"expired\">Expired</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <Button onClick={() => refetch()} disabled={isLoading}>\n            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n        </div>\n\n        {/* Subscribers Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Subscribers</CardTitle>\n            <CardDescription>\n              Manage your RevenueCat subscribers and their subscription status\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            {error && (\n              <div className=\"text-center py-8 text-red-600\">\n                Error loading subscribers: {error.message}\n              </div>\n            )}\n            \n            {isLoading ? (\n              <div className=\"text-center py-8\">\n                <RefreshCw className=\"h-8 w-8 animate-spin mx-auto mb-4\" />\n                Loading configuration...\n              </div>\n            ) : searchUserIds.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Search className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">Ready to Search</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Use the \"Search for Subscribers\" section above to enter user IDs and fetch their data.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  RevenueCat requires specific user IDs to fetch subscriber information.\n                </p>\n              </div>\n            ) : subscribers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Users className=\"h-12 w-12 mx-auto mb-4 text-muted-foreground\" />\n                <h3 className=\"text-lg font-medium mb-2\">No Valid Subscribers Found</h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  None of the provided user IDs returned valid subscriber data. Check the user IDs and try again.\n                </p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Searched for: {searchUserIds.join(\", \")}\n                </p>\n              </div>\n            ) : (\n              <>\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>User ID</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Subscriptions</TableHead>\n                      <TableHead>First Seen</TableHead>\n                      <TableHead>Last Seen</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {paginatedSubscribers.map((subscriber: RevenueCatSubscriber) => (\n                      <TableRow key={subscriber.subscriber.original_app_user_id}>\n                        <TableCell className=\"font-medium\">\n                          {subscriber.subscriber.original_app_user_id}\n                        </TableCell>\n                        <TableCell>\n                          <Badge \n                            variant={getSubscriptionStatus(subscriber.subscriber.subscriptions) === \"active\" ? \"default\" : \"secondary\"}\n                          >\n                            {getSubscriptionStatus(subscriber.subscriber.subscriptions)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {getSubscriptionCount(subscriber.subscriber.subscriptions)} active\n                        </TableCell>\n                        <TableCell>{formatDate(subscriber.subscriber.first_seen)}</TableCell>\n                        <TableCell>{formatDate(subscriber.subscriber.last_seen)}</TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => getSubscriberMutation.mutate(subscriber.subscriber.original_app_user_id)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => deleteSubscriberMutation.mutate(subscriber.subscriber.original_app_user_id)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n\n                {/* Pagination */}\n                {totalPages > 1 && (\n                  <div className=\"flex items-center justify-between mt-4\">\n                    <div className=\"text-sm text-muted-foreground\">\n                      Showing {((currentPage - 1) * pageSize) + 1} to {Math.min(currentPage * pageSize, filteredSubscribers.length)} of {filteredSubscribers.length} subscribers\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}\n                        disabled={currentPage === 1}\n                      >\n                        Previous\n                      </Button>\n                      <span className=\"text-sm\">\n                        Page {currentPage} of {totalPages}\n                      </span>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}\n                        disabled={currentPage === totalPages}\n                      >\n                        Next\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Details Modal */}\n      <Dialog open={isUserModalOpen} onOpenChange={setIsUserModalOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Subscriber Details</DialogTitle>\n            <DialogDescription>\n              Detailed information for {selectedUser?.subscriber.original_app_user_id}\n            </DialogDescription>\n          </DialogHeader>\n          \n          {selectedUser && (\n            <div className=\"space-y-6\">\n              {/* Basic Info */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Basic Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium\">User ID</label>\n                      <p className=\"text-sm text-muted-foreground\">{selectedUser.subscriber.original_app_user_id}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">First Seen</label>\n                      <p className=\"text-sm text-muted-foreground\">{formatDate(selectedUser.subscriber.first_seen)}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Last Seen</label>\n                      <p className=\"text-sm text-muted-foreground\">{formatDate(selectedUser.subscriber.last_seen)}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium\">Management URL</label>\n                      <a \n                        href={selectedUser.subscriber.management_url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-sm text-blue-600 hover:underline\"\n                      >\n                        Open in RevenueCat\n                      </a>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Subscriptions */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Subscriptions</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {Object.entries(selectedUser.subscriber.subscriptions).map(([productId, subscription]: [string, any]) => (\n                    <div key={productId} className=\"border rounded-lg p-4 mb-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">{productId}</h4>\n                        <Badge variant={new Date(subscription.expires_date) > new Date() ? \"default\" : \"secondary\"}>\n                          {new Date(subscription.expires_date) > new Date() ? \"Active\" : \"Expired\"}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <label className=\"font-medium\">Purchase Date</label>\n                          <p className=\"text-muted-foreground\">{formatDate(subscription.purchase_date)}</p>\n                        </div>\n                        <div>\n                          <label className=\"font-medium\">Expires</label>\n                          <p className=\"text-muted-foreground\">{formatDate(subscription.expires_date)}</p>\n                        </div>\n                        <div>\n                          <label className=\"font-medium\">Store</label>\n                          <p className=\"text-muted-foreground\">{subscription.store}</p>\n                        </div>\n                        <div>\n                          <label className=\"font-medium\">Period Type</label>\n                          <p className=\"text-muted-foreground\">{subscription.period_type}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n\n              {/* Entitlements */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Entitlements</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {Object.entries(selectedUser.subscriber.entitlements).map(([entitlementId, entitlement]: [string, any]) => (\n                    <div key={entitlementId} className=\"border rounded-lg p-4 mb-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium\">{entitlementId}</h4>\n                        <Badge variant={new Date(entitlement.expires_date) > new Date() ? \"default\" : \"secondary\"}>\n                          {new Date(entitlement.expires_date) > new Date() ? \"Active\" : \"Expired\"}\n                        </Badge>\n                      </div>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <label className=\"font-medium\">Product ID</label>\n                          <p className=\"text-muted-foreground\">{entitlement.product_identifier}</p>\n                        </div>\n                        <div>\n                          <label className=\"font-medium\">Purchase Date</label>\n                          <p className=\"text-muted-foreground\">{formatDate(entitlement.purchase_date)}</p>\n                        </div>\n                        <div>\n                          <label className=\"font-medium\">Expires</label>\n                          <p className=\"text-muted-foreground\">{formatDate(entitlement.expires_date)}</p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Grant Entitlement Modal */}\n      <Dialog open={isGrantModalOpen} onOpenChange={setIsGrantModalOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Gift className=\"h-5 w-5 text-green-600\" />\n              Grant Free Entitlement\n            </DialogTitle>\n            <DialogDescription>\n              Give a user free access to your premium features\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">User ID</label>\n              <Input\n                placeholder=\"Enter user ID (e.g., user_123, john@email.com)\"\n                value={grantUserId}\n                onChange={(e) => setGrantUserId(e.target.value)}\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                The RevenueCat App User ID of the person you want to grant access to\n              </p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Entitlement ID</label>\n              <Input\n                placeholder=\"Enter entitlement ID (e.g., premium, pro_access)\"\n                value={grantEntitlementId}\n                onChange={(e) => setGrantEntitlementId(e.target.value)}\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                The entitlement identifier configured in your RevenueCat dashboard\n              </p>\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium mb-2 block\">Duration</label>\n              <Select value={grantDuration} onValueChange={setGrantDuration}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"lifetime\">Lifetime Access</SelectItem>\n                  <SelectItem value=\"30\">30 Days</SelectItem>\n                  <SelectItem value=\"60\">60 Days</SelectItem>\n                  <SelectItem value=\"90\">90 Days</SelectItem>\n                  <SelectItem value=\"365\">1 Year</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"p-3 bg-amber-50 border border-amber-200 rounded-lg\">\n              <h4 className=\"font-medium text-amber-800 mb-1\">Important Notes:</h4>\n              <ul className=\"text-xs text-amber-700 space-y-1\">\n                <li>• This grants entitlements directly via RevenueCat API</li>\n                <li>• User will have access without purchasing</li>\n                <li>• Perfect for friends, family, and beta testers</li>\n                <li>• Make sure the entitlement ID matches your app configuration</li>\n              </ul>\n            </div>\n            \n            <div className=\"flex gap-2 pt-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsGrantModalOpen(false)}\n                className=\"flex-1\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleGrantEntitlement}\n                disabled={grantEntitlementMutation.isPending || !grantUserId.trim() || !grantEntitlementId.trim()}\n                className=\"flex-1 bg-green-600 hover:bg-green-700\"\n              >\n                {grantEntitlementMutation.isPending ? (\n                  <>\n                    <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Granting...\n                  </>\n                ) : (\n                  <>\n                    <Gift className=\"h-4 w-4 mr-2\" />\n                    Grant Access\n                  </>\n                )}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":42174}}}